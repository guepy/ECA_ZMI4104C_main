/*----- PROTECTED REGION ID(ZygoZMI4104CClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        ZygoZMI4104CClass.h
//
// description : Include for the ZygoZMI4104C root class.
//               This class is the singleton class for
//                the ZygoZMI4104C device class.
//               It contains all properties and methods which the 
//               ZygoZMI4104C requires only once e.g. the commands.
//
// project :     zygoZMI4104C
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef ZygoZMI4104CClass_H
#define ZygoZMI4104CClass_H

#include <tango.h>
#include <ZygoZMI4104C.h>


/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104CClass.h


namespace ZygoZMI4104C_ns
{
/*----- PROTECTED REGION ID(ZygoZMI4104CClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104CClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute baseAddress class definition
class baseAddressAttrib: public Tango::Attr
{
public:
	baseAddressAttrib():Attr("baseAddress",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~baseAddressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->read_baseAddress(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->write_baseAddress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI4104C *>(dev))->is_baseAddress_allowed(ty);}
};

//	Attribute interferometerType class definition
class interferometerTypeAttrib: public Tango::Attr
{
public:
	interferometerTypeAttrib():Attr("interferometerType",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~interferometerTypeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->read_interferometerType(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->write_interferometerType(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI4104C *>(dev))->is_interferometerType_allowed(ty);}
};

//	Attribute positionPrecision class definition
class positionPrecisionAttrib: public Tango::Attr
{
public:
	positionPrecisionAttrib():Attr("positionPrecision",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~positionPrecisionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->read_positionPrecision(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->write_positionPrecision(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI4104C *>(dev))->is_positionPrecision_allowed(ty);}
};

//	Attribute sampleSourceClock class definition
class sampleSourceClockAttrib: public Tango::Attr
{
public:
	sampleSourceClockAttrib():Attr("sampleSourceClock",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~sampleSourceClockAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->read_sampleSourceClock(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->write_sampleSourceClock(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI4104C *>(dev))->is_sampleSourceClock_allowed(ty);}
};

//	Attribute resetSourceClock class definition
class resetSourceClockAttrib: public Tango::Attr
{
public:
	resetSourceClockAttrib():Attr("resetSourceClock",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~resetSourceClockAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->read_resetSourceClock(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->write_resetSourceClock(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI4104C *>(dev))->is_resetSourceClock_allowed(ty);}
};

//	Attribute samplingFrequency class definition
class samplingFrequencyAttrib: public Tango::Attr
{
public:
	samplingFrequencyAttrib():Attr("samplingFrequency",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~samplingFrequencyAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->read_samplingFrequency(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->write_samplingFrequency(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI4104C *>(dev))->is_samplingFrequency_allowed(ty);}
};

//	Attribute biasMode class definition
class biasModeAttrib: public Tango::Attr
{
public:
	biasModeAttrib():Attr("biasMode",
			Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~biasModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->read_biasMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->write_biasMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI4104C *>(dev))->is_biasMode_allowed(ty);}
};

//	Attribute cecState class definition
class cecStateAttrib: public Tango::Attr
{
public:
	cecStateAttrib():Attr("cecState",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~cecStateAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->read_cecState(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->write_cecState(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI4104C *>(dev))->is_cecState_allowed(ty);}
};

//	Attribute continuousScanIntegrationTime class definition
class continuousScanIntegrationTimeAttrib: public Tango::Attr
{
public:
	continuousScanIntegrationTimeAttrib():Attr("continuousScanIntegrationTime",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~continuousScanIntegrationTimeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->read_continuousScanIntegrationTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->write_continuousScanIntegrationTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI4104C *>(dev))->is_continuousScanIntegrationTime_allowed(ty);}
};

//	Attribute continuousScanFrequency class definition
class continuousScanFrequencyAttrib: public Tango::Attr
{
public:
	continuousScanFrequencyAttrib():Attr("continuousScanFrequency",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~continuousScanFrequencyAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->read_continuousScanFrequency(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->write_continuousScanFrequency(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI4104C *>(dev))->is_continuousScanFrequency_allowed(ty);}
};

//	Attribute continuousScanSize class definition
class continuousScanSizeAttrib: public Tango::Attr
{
public:
	continuousScanSizeAttrib():Attr("continuousScanSize",
			Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~continuousScanSizeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->read_continuousScanSize(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->write_continuousScanSize(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI4104C *>(dev))->is_continuousScanSize_allowed(ty);}
};

//	Attribute axisPositions class definition
class axisPositionsAttrib: public Tango::SpectrumAttr
{
public:
	axisPositionsAttrib():SpectrumAttr("axisPositions",
			Tango::DEV_DOUBLE, Tango::READ, 4) {};
	~axisPositionsAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->read_axisPositions(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI4104C *>(dev))->is_axisPositions_allowed(ty);}
};

//	Attribute axisOpticalPowers class definition
class axisOpticalPowersAttrib: public Tango::SpectrumAttr
{
public:
	axisOpticalPowersAttrib():SpectrumAttr("axisOpticalPowers",
			Tango::DEV_DOUBLE, Tango::READ, 4) {};
	~axisOpticalPowersAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->read_axisOpticalPowers(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI4104C *>(dev))->is_axisOpticalPowers_allowed(ty);}
};

//	Attribute axisVelocities class definition
class axisVelocitiesAttrib: public Tango::SpectrumAttr
{
public:
	axisVelocitiesAttrib():SpectrumAttr("axisVelocities",
			Tango::DEV_DOUBLE, Tango::READ, 4) {};
	~axisVelocitiesAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->read_axisVelocities(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI4104C *>(dev))->is_axisVelocities_allowed(ty);}
};

//	Attribute axisPositionOffsets class definition
class axisPositionOffsetsAttrib: public Tango::SpectrumAttr
{
public:
	axisPositionOffsetsAttrib():SpectrumAttr("axisPositionOffsets",
			Tango::DEV_DOUBLE, Tango::READ_WRITE, 4) {};
	~axisPositionOffsetsAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->read_axisPositionOffsets(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->write_axisPositionOffsets(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI4104C *>(dev))->is_axisPositionOffsets_allowed(ty);}
};

//	Attribute axisPositionPresets class definition
class axisPositionPresetsAttrib: public Tango::SpectrumAttr
{
public:
	axisPositionPresetsAttrib():SpectrumAttr("axisPositionPresets",
			Tango::DEV_DOUBLE, Tango::READ_WRITE, 4) {};
	~axisPositionPresetsAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->read_axisPositionPresets(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->write_axisPositionPresets(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI4104C *>(dev))->is_axisPositionPresets_allowed(ty);}
};

//	Attribute ledsStatus class definition
class ledsStatusAttrib: public Tango::SpectrumAttr
{
public:
	ledsStatusAttrib():SpectrumAttr("ledsStatus",
			Tango::DEV_BOOLEAN, Tango::READ, 5) {};
	~ledsStatusAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->read_ledsStatus(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI4104C *>(dev))->is_ledsStatus_allowed(ty);}
};

//	Attribute continuousScanAxisTab class definition
class continuousScanAxisTabAttrib: public Tango::SpectrumAttr
{
public:
	continuousScanAxisTabAttrib():SpectrumAttr("continuousScanAxisTab",
			Tango::DEV_USHORT, Tango::READ_WRITE, 4) {};
	~continuousScanAxisTabAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->read_continuousScanAxisTab(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ZygoZMI4104C *>(dev))->write_continuousScanAxisTab(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI4104C *>(dev))->is_continuousScanAxisTab_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command ReadPosition class definition
class ReadPositionClass : public Tango::Command
{
public:
	ReadPositionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ReadPositionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ReadPositionClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ZygoZMI4104C *>(dev))->is_ReadPosition_allowed(any);}
};

//	Command ReadVelocity class definition
class ReadVelocityClass : public Tango::Command
{
public:
	ReadVelocityClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ReadVelocityClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ReadVelocityClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ZygoZMI4104C *>(dev))->is_ReadVelocity_allowed(any);}
};

//	Command ReadOpticalPower class definition
class ReadOpticalPowerClass : public Tango::Command
{
public:
	ReadOpticalPowerClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ReadOpticalPowerClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ReadOpticalPowerClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ZygoZMI4104C *>(dev))->is_ReadOpticalPower_allowed(any);}
};

//	Command ResetAxis class definition
class ResetAxisClass : public Tango::Command
{
public:
	ResetAxisClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetAxisClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetAxisClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ZygoZMI4104C *>(dev))->is_ResetAxis_allowed(any);}
};

//	Command InitializeZMISystem class definition
class InitializeZMISystemClass : public Tango::Command
{
public:
	InitializeZMISystemClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	InitializeZMISystemClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~InitializeZMISystemClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ZygoZMI4104C *>(dev))->is_InitializeZMISystem_allowed(any);}
};

//	Command EnableCyclicErrorCorrection class definition
class EnableCyclicErrorCorrectionClass : public Tango::Command
{
public:
	EnableCyclicErrorCorrectionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	EnableCyclicErrorCorrectionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~EnableCyclicErrorCorrectionClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ZygoZMI4104C *>(dev))->is_EnableCyclicErrorCorrection_allowed(any);}
};

//	Command DisableCyclicErrorCorrection class definition
class DisableCyclicErrorCorrectionClass : public Tango::Command
{
public:
	DisableCyclicErrorCorrectionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	DisableCyclicErrorCorrectionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~DisableCyclicErrorCorrectionClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ZygoZMI4104C *>(dev))->is_DisableCyclicErrorCorrection_allowed(any);}
};

//	Command StartContinuousScan class definition
class StartContinuousScanClass : public Tango::Command
{
public:
	StartContinuousScanClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartContinuousScanClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartContinuousScanClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ZygoZMI4104C *>(dev))->is_StartContinuousScan_allowed(any);}
};


/**
 *	The ZygoZMI4104CClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  ZygoZMI4104CClass : public Tango::DeviceClass
#else
class ZygoZMI4104CClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(ZygoZMI4104CClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104CClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static ZygoZMI4104CClass *init(const char *);
		static ZygoZMI4104CClass *instance();
		~ZygoZMI4104CClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		ZygoZMI4104CClass(string &);
		static ZygoZMI4104CClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	ZygoZMI4104C_H
