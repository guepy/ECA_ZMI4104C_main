/*----- PROTECTED REGION ID(ZygoZMIClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        ZygoZMIClass.h
//
// description : Include for the ZygoZMI root class.
//               This class is the singleton class for
//                the ZygoZMI device class.
//               It contains all properties and methods which the 
//               ZygoZMI requires only once e.g. the commands.
//
// project :     zygoZMI4104c
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef ZygoZMIClass_H
#define ZygoZMIClass_H

#include <tango.h>
#include <ZygoZMI.h>


/*----- PROTECTED REGION END -----*/	//	ZygoZMIClass.h


namespace ZygoZMI_ns
{
/*----- PROTECTED REGION ID(ZygoZMIClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	ZygoZMIClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute axis1Position class definition
class axis1PositionAttrib: public Tango::Attr
{
public:
	axis1PositionAttrib():Attr("axis1Position",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~axis1PositionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI *>(dev))->read_axis1Position(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI *>(dev))->is_axis1Position_allowed(ty);}
};

//	Attribute axis1State class definition
class axis1StateAttrib: public Tango::Attr
{
public:
	axis1StateAttrib():Attr("axis1State",
			Tango::DEV_ENUM, Tango::READ) {};
	~axis1StateAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI *>(dev))->read_axis1State(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI *>(dev))->is_axis1State_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(axis1StateEnum) == in_type;}
	virtual string get_enum_type() {return string("axis1StateEnum");}
};

//	Attribute boardVersion class definition
class boardVersionAttrib: public Tango::Attr
{
public:
	boardVersionAttrib():Attr("boardVersion",
			Tango::DEV_STRING, Tango::READ) {};
	~boardVersionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI *>(dev))->read_boardVersion(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI *>(dev))->is_boardVersion_allowed(ty);}
};

//	Attribute boardFirmwareVersion class definition
class boardFirmwareVersionAttrib: public Tango::Attr
{
public:
	boardFirmwareVersionAttrib():Attr("boardFirmwareVersion",
			Tango::DEV_STRING, Tango::READ) {};
	~boardFirmwareVersionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI *>(dev))->read_boardFirmwareVersion(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI *>(dev))->is_boardFirmwareVersion_allowed(ty);}
};

//	Attribute gatewayBoardVersion class definition
class gatewayBoardVersionAttrib: public Tango::Attr
{
public:
	gatewayBoardVersionAttrib():Attr("gatewayBoardVersion",
			Tango::DEV_STRING, Tango::READ) {};
	~gatewayBoardVersionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI *>(dev))->read_gatewayBoardVersion(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI *>(dev))->is_gatewayBoardVersion_allowed(ty);}
};

//	Attribute gatewayFirmwareVersion class definition
class gatewayFirmwareVersionAttrib: public Tango::Attr
{
public:
	gatewayFirmwareVersionAttrib():Attr("gatewayFirmwareVersion",
			Tango::DEV_STRING, Tango::READ) {};
	~gatewayFirmwareVersionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI *>(dev))->read_gatewayFirmwareVersion(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI *>(dev))->is_gatewayFirmwareVersion_allowed(ty);}
};

//	Attribute flyscanAxisNbr class definition
class flyscanAxisNbrAttrib: public Tango::Attr
{
public:
	flyscanAxisNbrAttrib():Attr("flyscanAxisNbr",
			Tango::DEV_UCHAR, Tango::READ_WRITE) {};
	~flyscanAxisNbrAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI *>(dev))->read_flyscanAxisNbr(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ZygoZMI *>(dev))->write_flyscanAxisNbr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI *>(dev))->is_flyscanAxisNbr_allowed(ty);}
};

//	Attribute flyscanFreq class definition
class flyscanFreqAttrib: public Tango::Attr
{
public:
	flyscanFreqAttrib():Attr("flyscanFreq",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~flyscanFreqAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI *>(dev))->read_flyscanFreq(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ZygoZMI *>(dev))->write_flyscanFreq(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI *>(dev))->is_flyscanFreq_allowed(ty);}
};

//	Attribute flyscanTime class definition
class flyscanTimeAttrib: public Tango::Attr
{
public:
	flyscanTimeAttrib():Attr("flyscanTime",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~flyscanTimeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ZygoZMI *>(dev))->read_flyscanTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ZygoZMI *>(dev))->write_flyscanTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ZygoZMI *>(dev))->is_flyscanTime_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command Start class definition
class StartClass : public Tango::Command
{
public:
	StartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ZygoZMI *>(dev))->is_Start_allowed(any);}
};

//	Command Stop class definition
class StopClass : public Tango::Command
{
public:
	StopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StopClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ZygoZMI *>(dev))->is_Stop_allowed(any);}
};

//	Command updatePosition class definition
class updatePositionClass : public Tango::Command
{
public:
	updatePositionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	updatePositionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~updatePositionClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ZygoZMI *>(dev))->is_updatePosition_allowed(any);}
};

//	Command startContinuousAcquisition class definition
class startContinuousAcquisitionClass : public Tango::Command
{
public:
	startContinuousAcquisitionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	startContinuousAcquisitionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~startContinuousAcquisitionClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ZygoZMI *>(dev))->is_startContinuousAcquisition_allowed(any);}
};

//	Command reset class definition
class resetClass : public Tango::Command
{
public:
	resetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	resetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~resetClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ZygoZMI *>(dev))->is_reset_allowed(any);}
};


/**
 *	The ZygoZMIClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  ZygoZMIClass : public Tango::DeviceClass
#else
class ZygoZMIClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(ZygoZMIClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMIClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static ZygoZMIClass *init(const char *);
		static ZygoZMIClass *instance();
		~ZygoZMIClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		ZygoZMIClass(string &);
		static ZygoZMIClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	ZygoZMI_H
