/*----- PROTECTED REGION ID(ZygoZMI4104C.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        ZygoZMI4104C.cpp
//
// description : C++ source for the ZygoZMI4104C class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               ZygoZMI4104C are implemented in this file.
//
// project :     ZygoZMI4104C
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <ZygoZMI4104C.h>
#include <ZygoZMI4104CClass.h>
#include <yat4tango/InnerAppender.h>
#include "eca_soleil_zmi4104c.h"


/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C.cpp

/**
 *  ZygoZMI4104C class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name                    |  Method name
//================================================================
//  State                           |  dev_state
//  Status                          |  dev_status
//  ResetMeasurementAxis            |  reset_measurement_axis
//  StartContinuousAcquisition      |  start_continuous_acquisition
//  StopContinnuousAcquisition      |  stop_continnuous_acquisition
//  EnableCyclicErrorCompensation   |  enable_cyclic_error_compensation
//  DisableCyclicErrorCompensation  |  disable_cyclic_error_compensation
//  ResetMeasurementSystem          |  reset_measurement_system
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  samplingFrequency                |  Tango::DevULong	Scalar
//  axis1LedState                    |  Tango::DevString	Scalar
//  axis2LedState                    |  Tango::DevString	Scalar
//  axis3LedState                    |  Tango::DevString	Scalar
//  axis4LedState                    |  Tango::DevString	Scalar
//  referenceAxisLedState            |  Tango::DevString	Scalar
//  currentPrecision                 |  Tango::DevEnum	Scalar
//  axis1PositionValue               |  Tango::DevDouble	Scalar
//  axis2PositionValue               |  Tango::DevDouble	Scalar
//  axis3PositionValue               |  Tango::DevDouble	Scalar
//  axis4PositionValue               |  Tango::DevDouble	Scalar
//  axis1OpticalPowerValue           |  Tango::DevDouble	Scalar
//  axis2OpticalPowerValue           |  Tango::DevDouble	Scalar
//  axis3OpticalPowerValue           |  Tango::DevDouble	Scalar
//  axis4OpticalPowerValue           |  Tango::DevDouble	Scalar
//  axis1OffsetPositionValue         |  Tango::DevDouble	Scalar
//  axis2OffsetPositionValue         |  Tango::DevDouble	Scalar
//  axis3OffsetPositionValue         |  Tango::DevDouble	Scalar
//  axis4OffsetPositionValue         |  Tango::DevDouble	Scalar
//  axis1PresetPositionValue         |  Tango::DevDouble	Scalar
//  axis2PresetPositionValue         |  Tango::DevDouble	Scalar
//  axis3PresetPositionValue         |  Tango::DevDouble	Scalar
//  axis4PresetPositionValue         |  Tango::DevDouble	Scalar
//  axis1BiasMode                    |  Tango::DevString	Scalar
//  axis2BiasMode                    |  Tango::DevString	Scalar
//  axis3BiasMode                    |  Tango::DevString	Scalar
//  axis4BiasMode                    |  Tango::DevString	Scalar
//  interferometerConfiguration      |  Tango::DevString	Scalar
//  sisFirmwareVersion               |  Tango::DevString	Scalar
//  sisBoardVersion                  |  Tango::DevString	Scalar
//  zygoFirmwareVersion              |  Tango::DevString	Scalar
//  zygoBoardVersion                 |  Tango::DevString	Scalar
//  zygoSerialNumber                 |  Tango::DevString	Scalar
//  continuousSamplingAxes           |  Tango::DevString	Scalar
//  continuousSamplingSize           |  Tango::DevULong	Scalar
//  cecAxes                          |  Tango::DevString	Scalar
//  continuousScanPositionMeanValue  |  Tango::DevDouble	Scalar
//  continuousScanPositionStdDev     |  Tango::DevDouble	Scalar
//  fifoMode                         |  Tango::DevEnum	Scalar
//================================================================

namespace ZygoZMI4104C_ns
{
/*----- PROTECTED REGION ID(ZygoZMI4104C::namespace_starting) ENABLED START -----*/

//	static initializations

bool* ZygoZMI4104C::ledsErrorStatus = new bool[5];
bool* ZygoZMI4104C::ledsStatus=new bool[5];
/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : ZygoZMI4104C::ZygoZMI4104C()
 *	Description : Constructors for a Tango device
 *                implementing the classZygoZMI4104C
 */
//--------------------------------------------------------
ZygoZMI4104C::ZygoZMI4104C(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(ZygoZMI4104C::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::constructor_1
}
//--------------------------------------------------------
ZygoZMI4104C::ZygoZMI4104C(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(ZygoZMI4104C::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::constructor_2
}
//--------------------------------------------------------
ZygoZMI4104C::ZygoZMI4104C(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(ZygoZMI4104C::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : ZygoZMI4104C::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void ZygoZMI4104C::delete_device()
{
	DEBUG_STREAM << "ZygoZMI4104C::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	delete[] flyscanPath;
	delete[] ledsColorString ;
	delete[] optPwr;
	delete[] ledsColor;
	delete[] flyscanAxesTab;
	delete[] cecAxesTab;
	delete[] biasModeString;
	delete[] interferometerConfigurationString;
	delete[] flyscanPath;
	delete[] meanVal;
	delete[] stdDevVal;
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::delete_device
	delete[] attr_samplingFrequency_read;
	delete[] attr_axis1LedState_read;
	delete[] attr_axis2LedState_read;
	delete[] attr_axis3LedState_read;
	delete[] attr_axis4LedState_read;
	delete[] attr_referenceAxisLedState_read;
	delete[] attr_currentPrecision_read;
	delete[] attr_axis1PositionValue_read;
	delete[] attr_axis2PositionValue_read;
	delete[] attr_axis3PositionValue_read;
	delete[] attr_axis4PositionValue_read;
	delete[] attr_axis1OpticalPowerValue_read;
	delete[] attr_axis2OpticalPowerValue_read;
	delete[] attr_axis3OpticalPowerValue_read;
	delete[] attr_axis4OpticalPowerValue_read;
	delete[] attr_axis1OffsetPositionValue_read;
	delete[] attr_axis2OffsetPositionValue_read;
	delete[] attr_axis3OffsetPositionValue_read;
	delete[] attr_axis4OffsetPositionValue_read;
	delete[] attr_axis1PresetPositionValue_read;
	delete[] attr_axis2PresetPositionValue_read;
	delete[] attr_axis3PresetPositionValue_read;
	delete[] attr_axis4PresetPositionValue_read;
	delete[] attr_axis1BiasMode_read;
	delete[] attr_axis2BiasMode_read;
	delete[] attr_axis3BiasMode_read;
	delete[] attr_axis4BiasMode_read;
	delete[] attr_interferometerConfiguration_read;
	delete[] attr_sisFirmwareVersion_read;
	delete[] attr_sisBoardVersion_read;
	delete[] attr_zygoFirmwareVersion_read;
	delete[] attr_zygoBoardVersion_read;
	delete[] attr_zygoSerialNumber_read;
	delete[] attr_continuousSamplingAxes_read;
	delete[] attr_continuousSamplingSize_read;
	delete[] attr_cecAxes_read;
	delete[] attr_continuousScanPositionMeanValue_read;
	delete[] attr_continuousScanPositionStdDev_read;
	delete[] attr_fifoMode_read;
}

//--------------------------------------------------------
/**
 *	Method      : ZygoZMI4104C::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void ZygoZMI4104C::init_device()
{
	DEBUG_STREAM << "ZygoZMI4104C::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	//bias_mode = BIAS_CONSTANT_VOLT_MODE;
	//	Initialization before get_device_property() call
	m_is_device_initialized = false;
	//	Initialization before get_device_property() call
    set_state(Tango::INIT);
	//- initialize the inner appender (first thing to do)
	try
	{
		INFO_STREAM << "Create the InnerAppender in order to manage logs." << endl;
		yat4tango::InnerAppender::initialize(this);
		INFO_STREAM << "Create the DeviceInfo in order to manage info on versions." << endl;
		yat4tango::DeviceInfo::initialize( this, YAT_XSTR(PROJECT_NAME), YAT_XSTR(PROJECT_VERSION) );
	}
	catch( Tango::DevFailed& df )
	{
		ERROR_STREAM << df << std::endl;
		m_status_message << "Initialization failed - could not instanciate the InnerAppender!";
		return;
	}
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_samplingFrequency_read = new Tango::DevULong[1];
	attr_axis1LedState_read = new Tango::DevString[1];
	attr_axis2LedState_read = new Tango::DevString[1];
	attr_axis3LedState_read = new Tango::DevString[1];
	attr_axis4LedState_read = new Tango::DevString[1];
	attr_referenceAxisLedState_read = new Tango::DevString[1];
	attr_currentPrecision_read = new Tango::DevShort[1];
	attr_axis1PositionValue_read = new Tango::DevDouble[1];
	attr_axis2PositionValue_read = new Tango::DevDouble[1];
	attr_axis3PositionValue_read = new Tango::DevDouble[1];
	attr_axis4PositionValue_read = new Tango::DevDouble[1];
	attr_axis1OpticalPowerValue_read = new Tango::DevDouble[1];
	attr_axis2OpticalPowerValue_read = new Tango::DevDouble[1];
	attr_axis3OpticalPowerValue_read = new Tango::DevDouble[1];
	attr_axis4OpticalPowerValue_read = new Tango::DevDouble[1];
	attr_axis1OffsetPositionValue_read = new Tango::DevDouble[1];
	attr_axis2OffsetPositionValue_read = new Tango::DevDouble[1];
	attr_axis3OffsetPositionValue_read = new Tango::DevDouble[1];
	attr_axis4OffsetPositionValue_read = new Tango::DevDouble[1];
	attr_axis1PresetPositionValue_read = new Tango::DevDouble[1];
	attr_axis2PresetPositionValue_read = new Tango::DevDouble[1];
	attr_axis3PresetPositionValue_read = new Tango::DevDouble[1];
	attr_axis4PresetPositionValue_read = new Tango::DevDouble[1];
	attr_axis1BiasMode_read = new Tango::DevString[1];
	attr_axis2BiasMode_read = new Tango::DevString[1];
	attr_axis3BiasMode_read = new Tango::DevString[1];
	attr_axis4BiasMode_read = new Tango::DevString[1];
	attr_interferometerConfiguration_read = new Tango::DevString[1];
	attr_sisFirmwareVersion_read = new Tango::DevString[1];
	attr_sisBoardVersion_read = new Tango::DevString[1];
	attr_zygoFirmwareVersion_read = new Tango::DevString[1];
	attr_zygoBoardVersion_read = new Tango::DevString[1];
	attr_zygoSerialNumber_read = new Tango::DevString[1];
	attr_continuousSamplingAxes_read = new Tango::DevString[1];
	attr_continuousSamplingSize_read = new Tango::DevULong[1];
	attr_cecAxes_read = new Tango::DevString[1];
	attr_continuousScanPositionMeanValue_read = new Tango::DevDouble[1];
	attr_continuousScanPositionStdDev_read = new Tango::DevDouble[1];
	attr_fifoMode_read = new Tango::DevShort[1];
	/*----- PROTECTED REGION ID(ZygoZMI4104C::init_device) ENABLED START -----*/
	
	ledsColorString = new Tango::DevString[4];
	optPwr = new Tango::DevDouble[5];
	ledsColor = new Tango::DevUChar[6];
	flyscanAxesTab = new Tango::DevUShort[6];
	cecAxesTab = new Tango::DevUShort[6];
	biasModeString = new Tango::DevString[6];
	interferometerConfigurationString = new Tango::DevString[3];
	meanVal = new double;
	stdDevVal = new double;
	
	//	Initialize device
	
#if 0
	
	DEBUG_STREAM << "ZygoZMI4104C::vme_system_reset() Start" << endl;
	vme_system_reset();
	DEBUG_STREAM << "ZygoZMI4104C::vme_system_reset() Stop" << endl;

	ERROR_STREAM << "Initialization failed - in vme_system_reset() function" << std::endl;



#else
	if (initSisBoards() != RET_SUCCESS) 
	{
		DEBUG_STREAM << "Failed to initialize SIS boards" << endl;	
		zygoLogFatal("Failed to initialize SIS boards\n");	
		return;
	}
#endif
	ledsColorString[0] = "Black\0";
	ledsColorString[1] = "Green\0";
	ledsColorString[2] = "Yellow\0";
	ledsColorString[3] = "\0";
	for(int i=0;i<sizeof(ledsColor);i++)
	{
		ledsColor[i] = 0;
		flyscanAxesTab[i] = 0;
		cecAxesTab[i] = 0;
	}
	ledsColor[sizeof(ledsColor)-1] = '\0';
	flyscanAxesTab[sizeof(flyscanAxesTab)/sizeof(flyscanAxesTab[0])-1] = '\0';
	cecAxesTab[sizeof(cecAxesTab)/sizeof(cecAxesTab[0])-1] = '\0';
	optPwr[4]='\0';
	
	biasModeString[0] ="OFF\0";
	biasModeString[1] ="CONSTANT_VOLTAGE\0";
	biasModeString[2] ="CONSTANT_GAIN\0";
	biasModeString[3] ="CONSTANT_OPTICAL_POWER\0";
	biasModeString[4] ="SIG_RMS_ADJUST_MODE\0";
	biasModeString[5] ="\0";
	interferometerConfigurationString[0] ="SINGLE\0";
	interferometerConfigurationString[1] ="DOUBLE\0";
	interferometerConfigurationString[2] ='\0';
	*attr_continuousSamplingAxes_read="NO_AXIS_SELECTED";
	*attr_cecAxes_read = "NO_AXIS_SELECTED";
	*attr_continuousSamplingSize_read=1;
	flyscanAxesCtr = 0;
	cecAxesCtr = 0;
    ceVelMin = 96;
    ceVelMax=31457;
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::init_device
}

//--------------------------------------------------------
/**
 *	Method      : ZygoZMI4104C::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void ZygoZMI4104C::get_device_property()
{
	/*----- PROTECTED REGION ID(ZygoZMI4104C::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("baseAddress"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on ZygoZMI4104CClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		ZygoZMI4104CClass	*ds_class =
			(static_cast<ZygoZMI4104CClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize baseAddress from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  baseAddress;
		else {
			//	Try to initialize baseAddress from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  baseAddress;
		}
		//	And try to extract baseAddress value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  baseAddress;

	}

	/*----- PROTECTED REGION ID(ZygoZMI4104C::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : ZygoZMI4104C::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void ZygoZMI4104C::always_executed_hook()
{
	DEBUG_STREAM << "ZygoZMI4104C::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : ZygoZMI4104C::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "ZygoZMI4104C::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	getLEDsColor(ledsColor);
	readOpticalPowerUsingSsiAv(optPwr);
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : ZygoZMI4104C::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "ZygoZMI4104C::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute samplingFrequency related method
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_samplingFrequency(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_samplingFrequency(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_samplingFrequency) ENABLED START -----*/
	//	Set the attribute value
	getSamplingFrequency((uint32_t*)attr_samplingFrequency_read);
	attr.set_value(attr_samplingFrequency_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_samplingFrequency
}
//--------------------------------------------------------
/**
 *	Write attribute samplingFrequency related method
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_samplingFrequency(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::write_samplingFrequency(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevULong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_samplingFrequency) ENABLED START -----*/
	
	setSamplingFrequency((unsigned int)w_val);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_samplingFrequency
}
//--------------------------------------------------------
/**
 *	Read attribute axis1LedState related method
 *	Description: the state of the error LED on axis 1
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis1LedState(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis1LedState(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis1LedState) ENABLED START -----*/
	//	Set the attribute value
	*attr_axis1LedState_read=ledsColorString[(int)ledsColor[0]];
	attr.set_value(attr_axis1LedState_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis1LedState
}
//--------------------------------------------------------
/**
 *	Read attribute axis2LedState related method
 *	Description: The state of the error LED on axis 2
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis2LedState(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis2LedState(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis2LedState) ENABLED START -----*/
	//	Set the attribute value
	*attr_axis2LedState_read=ledsColorString[(int)ledsColor[1]];
	attr.set_value(attr_axis2LedState_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis2LedState
}
//--------------------------------------------------------
/**
 *	Read attribute axis3LedState related method
 *	Description: The state of the error LED on axis 3
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis3LedState(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis3LedState(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis3LedState) ENABLED START -----*/
	//	Set the attribute value
	*attr_axis3LedState_read=ledsColorString[(int)ledsColor[2]];
	attr.set_value(attr_axis3LedState_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis3LedState
}
//--------------------------------------------------------
/**
 *	Read attribute axis4LedState related method
 *	Description: The state of the error LED on axis 4
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis4LedState(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis4LedState(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis4LedState) ENABLED START -----*/
	//	Set the attribute value
	*attr_axis4LedState_read=ledsColorString[(int)ledsColor[3]];
	attr.set_value(attr_axis4LedState_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis4LedState
}
//--------------------------------------------------------
/**
 *	Read attribute referenceAxisLedState related method
 *	Description: The state of the error LED on reference axis
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_referenceAxisLedState(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_referenceAxisLedState(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_referenceAxisLedState) ENABLED START -----*/
	//	Set the attribute value
	*attr_referenceAxisLedState_read=ledsColorString[(int)ledsColor[4]];
	attr.set_value(attr_referenceAxisLedState_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_referenceAxisLedState
}
//--------------------------------------------------------
/**
 *	Read attribute currentPrecision related method
 *	Description: THE PRECISION OF POSITION VALUE REGISTER
 *
 *	Data type:	Tango::DevEnum (currentPrecisionEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_currentPrecision(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_currentPrecision(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_currentPrecision) ENABLED START -----*/
	//	Set the attribute value
	*attr_currentPrecision_read = (Tango::DevShort)(getPrecision()? currentPrecisionEnum::_REG37 : currentPrecisionEnum::_REG32);
	attr.set_value(attr_currentPrecision_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_currentPrecision
}
//--------------------------------------------------------
/**
 *	Write attribute currentPrecision related method
 *	Description: THE PRECISION OF POSITION VALUE REGISTER
 *
 *	Data type:	Tango::DevEnum (currentPrecisionEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_currentPrecision(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::write_currentPrecision(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_currentPrecision) ENABLED START -----*/
	setPrecision(int(w_val));
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_currentPrecision
}
//--------------------------------------------------------
/**
 *	Read attribute axis1PositionValue related method
 *	Description: the position value measured on axis 1
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis1PositionValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis1PositionValue(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis1PositionValue) ENABLED START -----*/
	//	Set the attribute value
	readPosition(1,attr_axis1PositionValue_read);
	attr.set_value(attr_axis1PositionValue_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis1PositionValue
}
//--------------------------------------------------------
/**
 *	Read attribute axis2PositionValue related method
 *	Description: the position value measured on axis 2
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis2PositionValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis2PositionValue(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis2PositionValue) ENABLED START -----*/
	//	Set the attribute value
	readPosition(2,attr_axis2PositionValue_read);
	attr.set_value(attr_axis2PositionValue_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis2PositionValue
}
//--------------------------------------------------------
/**
 *	Read attribute axis3PositionValue related method
 *	Description: the position value measured on axis 3
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis3PositionValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis3PositionValue(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis3PositionValue) ENABLED START -----*/
	//	Set the attribute value
	readPosition(3,attr_axis3PositionValue_read);
	attr.set_value(attr_axis3PositionValue_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis3PositionValue
}
//--------------------------------------------------------
/**
 *	Read attribute axis4PositionValue related method
 *	Description: the position value measured on axis 4
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis4PositionValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis4PositionValue(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis4PositionValue) ENABLED START -----*/
	//	Set the attribute value
	readPosition(4,attr_axis4PositionValue_read);
	attr.set_value(attr_axis4PositionValue_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis4PositionValue
}
//--------------------------------------------------------
/**
 *	Read attribute axis1OpticalPowerValue related method
 *	Description: the optical power value measured on axis 1
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis1OpticalPowerValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis1OpticalPowerValue(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis1OpticalPowerValue) ENABLED START -----*/
	//	Set the attribute value
	attr_axis1OpticalPowerValue_read = optPwr;
	attr.set_value(attr_axis1OpticalPowerValue_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis1OpticalPowerValue
}
//--------------------------------------------------------
/**
 *	Read attribute axis2OpticalPowerValue related method
 *	Description: the optical power value measured on axis 2
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis2OpticalPowerValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis2OpticalPowerValue(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis2OpticalPowerValue) ENABLED START -----*/
	//	Set the attribute value
	attr_axis2OpticalPowerValue_read = optPwr+1;
	attr.set_value(attr_axis2OpticalPowerValue_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis2OpticalPowerValue
}
//--------------------------------------------------------
/**
 *	Read attribute axis3OpticalPowerValue related method
 *	Description: the optical power value measured on axis 3
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis3OpticalPowerValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis3OpticalPowerValue(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis3OpticalPowerValue) ENABLED START -----*/
	//	Set the attribute value
	attr_axis3OpticalPowerValue_read = optPwr+2;
	attr.set_value(attr_axis3OpticalPowerValue_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis3OpticalPowerValue
}
//--------------------------------------------------------
/**
 *	Read attribute axis4OpticalPowerValue related method
 *	Description: the optical power value measured on axis 4
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis4OpticalPowerValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis4OpticalPowerValue(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis4OpticalPowerValue) ENABLED START -----*/
	//	Set the attribute value
	attr_axis4OpticalPowerValue_read = optPwr+3;
	attr.set_value(attr_axis4OpticalPowerValue_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis4OpticalPowerValue
}
//--------------------------------------------------------
/**
 *	Read attribute axis1OffsetPositionValue related method
 *	Description: This contains the offset value that is subtracted from all position measurements on axis 1
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis1OffsetPositionValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis1OffsetPositionValue(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis1OffsetPositionValue) ENABLED START -----*/
	//	Set the attribute value
	getPositionOffset(1, attr_axis1OffsetPositionValue_read);
	attr.set_value(attr_axis1OffsetPositionValue_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis1OffsetPositionValue
}
//--------------------------------------------------------
/**
 *	Write attribute axis1OffsetPositionValue related method
 *	Description: This contains the offset value that is subtracted from all position measurements on axis 1
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_axis1OffsetPositionValue(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::write_axis1OffsetPositionValue(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_axis1OffsetPositionValue) ENABLED START -----*/
	
	setPositionOffset(1, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_axis1OffsetPositionValue
}
//--------------------------------------------------------
/**
 *	Read attribute axis2OffsetPositionValue related method
 *	Description: This contains the offset value that is subtracted from all position measurements on axis 2
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis2OffsetPositionValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis2OffsetPositionValue(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis2OffsetPositionValue) ENABLED START -----*/
	//	Set the attribute value
	getPositionOffset(2, attr_axis2OffsetPositionValue_read);
	attr.set_value(attr_axis2OffsetPositionValue_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis2OffsetPositionValue
}
//--------------------------------------------------------
/**
 *	Write attribute axis2OffsetPositionValue related method
 *	Description: This contains the offset value that is subtracted from all position measurements on axis 2
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_axis2OffsetPositionValue(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::write_axis2OffsetPositionValue(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_axis2OffsetPositionValue) ENABLED START -----*/
	
	
	setPositionOffset(2, w_val);
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_axis2OffsetPositionValue
}
//--------------------------------------------------------
/**
 *	Read attribute axis3OffsetPositionValue related method
 *	Description: This contains the offset value that is subtracted from all position measurements on axis 3
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis3OffsetPositionValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis3OffsetPositionValue(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis3OffsetPositionValue) ENABLED START -----*/
	//	Set the attribute value
	getPositionOffset(3, attr_axis3OffsetPositionValue_read);
	attr.set_value(attr_axis3OffsetPositionValue_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis3OffsetPositionValue
}
//--------------------------------------------------------
/**
 *	Write attribute axis3OffsetPositionValue related method
 *	Description: This contains the offset value that is subtracted from all position measurements on axis 3
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_axis3OffsetPositionValue(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::write_axis3OffsetPositionValue(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_axis3OffsetPositionValue) ENABLED START -----*/
	
	setPositionOffset(3, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_axis3OffsetPositionValue
}
//--------------------------------------------------------
/**
 *	Read attribute axis4OffsetPositionValue related method
 *	Description: This contains the offset value that is subtracted from all position measurements on axis 4
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis4OffsetPositionValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis4OffsetPositionValue(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis4OffsetPositionValue) ENABLED START -----*/
	//	Set the attribute value
	getPositionOffset(4, attr_axis4OffsetPositionValue_read);
	attr.set_value(attr_axis4OffsetPositionValue_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis4OffsetPositionValue
}
//--------------------------------------------------------
/**
 *	Write attribute axis4OffsetPositionValue related method
 *	Description: This contains the offset value that is subtracted from all position measurements on axis 4
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_axis4OffsetPositionValue(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::write_axis4OffsetPositionValue(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_axis4OffsetPositionValue) ENABLED START -----*/
	
	
	setPositionOffset(4, w_val);
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_axis4OffsetPositionValue
}
//--------------------------------------------------------
/**
 *	Read attribute axis1PresetPositionValue related method
 *	Description: This is the preset value that is loaded into the position register of axis 1
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis1PresetPositionValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis1PresetPositionValue(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis1PresetPositionValue) ENABLED START -----*/
	//	Set the attribute value
	getPresetPosition(1, attr_axis1PresetPositionValue_read);
	attr.set_value(attr_axis1PresetPositionValue_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis1PresetPositionValue
}
//--------------------------------------------------------
/**
 *	Write attribute axis1PresetPositionValue related method
 *	Description: This is the preset value that is loaded into the position register of axis 1
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_axis1PresetPositionValue(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::write_axis1PresetPositionValue(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_axis1PresetPositionValue) ENABLED START -----*/
	
	
	setPresetPosition(1, w_val);
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_axis1PresetPositionValue
}
//--------------------------------------------------------
/**
 *	Read attribute axis2PresetPositionValue related method
 *	Description: This is the preset value that is loaded into the position register of axis 2
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis2PresetPositionValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis2PresetPositionValue(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis2PresetPositionValue) ENABLED START -----*/
	//	Set the attribute value
	getPresetPosition(2, attr_axis2PresetPositionValue_read);
	attr.set_value(attr_axis2PresetPositionValue_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis2PresetPositionValue
}
//--------------------------------------------------------
/**
 *	Write attribute axis2PresetPositionValue related method
 *	Description: This is the preset value that is loaded into the position register of axis 2
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_axis2PresetPositionValue(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::write_axis2PresetPositionValue(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_axis2PresetPositionValue) ENABLED START -----*/
	
	setPresetPosition(2, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_axis2PresetPositionValue
}
//--------------------------------------------------------
/**
 *	Read attribute axis3PresetPositionValue related method
 *	Description: This is the preset value that is loaded into the position register of axis 3
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis3PresetPositionValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis3PresetPositionValue(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis3PresetPositionValue) ENABLED START -----*/
	//	Set the attribute value
	getPresetPosition(3, attr_axis3PresetPositionValue_read);
	attr.set_value(attr_axis3PresetPositionValue_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis3PresetPositionValue
}
//--------------------------------------------------------
/**
 *	Write attribute axis3PresetPositionValue related method
 *	Description: This is the preset value that is loaded into the position register of axis 3
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_axis3PresetPositionValue(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::write_axis3PresetPositionValue(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_axis3PresetPositionValue) ENABLED START -----*/
	
	
	setPresetPosition(3, w_val);
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_axis3PresetPositionValue
}
//--------------------------------------------------------
/**
 *	Read attribute axis4PresetPositionValue related method
 *	Description: This is the preset value that is loaded into the position register of axis 4
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis4PresetPositionValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis4PresetPositionValue(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis4PresetPositionValue) ENABLED START -----*/
	//	Set the attribute value
	getPresetPosition(4, attr_axis4PresetPositionValue_read);
	attr.set_value(attr_axis4PresetPositionValue_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis4PresetPositionValue
}
//--------------------------------------------------------
/**
 *	Write attribute axis4PresetPositionValue related method
 *	Description: This is the preset value that is loaded into the position register of axis 4
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_axis4PresetPositionValue(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::write_axis4PresetPositionValue(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_axis4PresetPositionValue) ENABLED START -----*/
	
	
	setPresetPosition(4, w_val);
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_axis4PresetPositionValue
}
//--------------------------------------------------------
/**
 *	Read attribute axis1BiasMode related method
 *	Description: This selects the mode of operation for the APD Bias control on axis 1. possible values are: OFF, CONSTANT_VOLTAGE, CONSTANT_GAIN, CONSTANT_OPTICAL_POWER, SIG_RMS_ADJUST_MODE
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis1BiasMode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis1BiasMode(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis1BiasMode) ENABLED START -----*/
	//	Set the attribute value
	uint32_t biasMode=0;
	getBiasMode(1,&biasMode);
	*attr_axis1BiasMode_read = biasModeString[biasMode];
	attr.set_value(attr_axis1BiasMode_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis1BiasMode
}
//--------------------------------------------------------
/**
 *	Write attribute axis1BiasMode related method
 *	Description: This selects the mode of operation for the APD Bias control on axis 1. possible values are: OFF, CONSTANT_VOLTAGE, CONSTANT_GAIN, CONSTANT_OPTICAL_POWER, SIG_RMS_ADJUST_MODE
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_axis1BiasMode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::write_axis1BiasMode(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_axis1BiasMode) ENABLED START -----*/
	
	localSetBiasMode(1,w_val);
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_axis1BiasMode
}
//--------------------------------------------------------
/**
 *	Read attribute axis2BiasMode related method
 *	Description: This selects the mode of operation for the APD Bias control on axis 2. possible values are: OFF, CONSTANT_VOLTAGE, CONSTANT_GAIN, CONSTANT_OPTICAL_POWER, SIG_RMS_ADJUST_MODE
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis2BiasMode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis2BiasMode(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis2BiasMode) ENABLED START -----*/
	//	Set the attribute value
	uint32_t biasMode=0;
	getBiasMode(2,&biasMode);
	*attr_axis2BiasMode_read = biasModeString[biasMode];
	attr.set_value(attr_axis2BiasMode_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis2BiasMode
}
//--------------------------------------------------------
/**
 *	Write attribute axis2BiasMode related method
 *	Description: This selects the mode of operation for the APD Bias control on axis 2. possible values are: OFF, CONSTANT_VOLTAGE, CONSTANT_GAIN, CONSTANT_OPTICAL_POWER, SIG_RMS_ADJUST_MODE
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_axis2BiasMode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::write_axis2BiasMode(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_axis2BiasMode) ENABLED START -----*/
	
	localSetBiasMode(2,w_val);
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_axis2BiasMode
}
//--------------------------------------------------------
/**
 *	Read attribute axis3BiasMode related method
 *	Description: This selects the mode of operation for the APD Bias control on axis 3 possible values are: OFF, CONSTANT_VOLTAGE, CONSTANT_GAIN, CONSTANT_OPTICAL_POWER, SIG_RMS_ADJUST_MODE
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis3BiasMode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis3BiasMode(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis3BiasMode) ENABLED START -----*/
	//	Set the attribute value
	uint32_t biasMode=0;
	getBiasMode(3,&biasMode);
	*attr_axis3BiasMode_read = biasModeString[biasMode];
	attr.set_value(attr_axis3BiasMode_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis3BiasMode
}
//--------------------------------------------------------
/**
 *	Write attribute axis3BiasMode related method
 *	Description: This selects the mode of operation for the APD Bias control on axis 3 possible values are: OFF, CONSTANT_VOLTAGE, CONSTANT_GAIN, CONSTANT_OPTICAL_POWER, SIG_RMS_ADJUST_MODE
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_axis3BiasMode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::write_axis3BiasMode(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_axis3BiasMode) ENABLED START -----*/
	
	localSetBiasMode(3,w_val);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_axis3BiasMode
}
//--------------------------------------------------------
/**
 *	Read attribute axis4BiasMode related method
 *	Description: This selects the mode of operation for the APD Bias control on axis 4 possible values are: OFF, CONSTANT_VOLTAGE, CONSTANT_GAIN, CONSTANT_OPTICAL_POWER, SIG_RMS_ADJUST_MODE
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_axis4BiasMode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_axis4BiasMode(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_axis4BiasMode) ENABLED START -----*/
	//	Set the attribute value
	uint32_t biasMode=0;
	getBiasMode(4,&biasMode);
	*attr_axis4BiasMode_read = biasModeString[biasMode];
	attr.set_value(attr_axis4BiasMode_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_axis4BiasMode
}
//--------------------------------------------------------
/**
 *	Write attribute axis4BiasMode related method
 *	Description: This selects the mode of operation for the APD Bias control on axis 4 possible values are: OFF, CONSTANT_VOLTAGE, CONSTANT_GAIN, CONSTANT_OPTICAL_POWER, SIG_RMS_ADJUST_MODE
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_axis4BiasMode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::write_axis4BiasMode(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_axis4BiasMode) ENABLED START -----*/
	localSetBiasMode(4,w_val);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_axis4BiasMode
}
//--------------------------------------------------------
/**
 *	Read attribute interferometerConfiguration related method
 *	Description: The configuration of the interferometer. Accepted values are SINGLE or  DOUBLE
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_interferometerConfiguration(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_interferometerConfiguration(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_interferometerConfiguration) ENABLED START -----*/
	//	Set the attribute value
	Tango::DevUShort val=1;
	val = (Tango::DevUShort)getInterferometerConfiguration();
	DEBUG_STREAM << "interferometer config is: " << val << endl;
	attr_interferometerConfiguration_read[0] = interferometerConfigurationString[val-1];
	attr.set_value(attr_interferometerConfiguration_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_interferometerConfiguration
}
//--------------------------------------------------------
/**
 *	Write attribute interferometerConfiguration related method
 *	Description: The configuration of the interferometer. Accepted values are SINGLE or  DOUBLE
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_interferometerConfiguration(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::write_interferometerConfiguration(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_interferometerConfiguration) ENABLED START -----*/
	int len=2, res=0;
	int len_wval = ((std::string)w_val).length();
	
	for(int i=0; i<len_wval;i++){
			w_val[i] = (char)(toupper(w_val[i]));
		}
	try
	{
		for(int i=0; i<len;i++){
			res = (((std::string)w_val).compare(interferometerConfigurationString[i]));
			std::cerr<<"res is " << res << std::endl;
			
			if(!res){
				if(setInterferometerConfiguration(i+1)!=RET_SUCCESS)
					throw std::invalid_argument("Failed to set interferometer configuration");
				else
					
				break;
			}
		}
		if(i>=len)
			throw std::invalid_argument("Unknow interferometer configuration. Please read the attribute description");
	}
	catch(const invalid_argument& msg)
	{
		std::cerr << "exception: " << msg.what() << std::endl;
	}
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_interferometerConfiguration
}
//--------------------------------------------------------
/**
 *	Read attribute sisFirmwareVersion related method
 *	Description: the firmware version of the VME/PCI gateway
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_sisFirmwareVersion(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_sisFirmwareVersion(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_sisFirmwareVersion) ENABLED START -----*/
	//	Set the attribute value
	*attr_sisFirmwareVersion_read = (Tango::DevString)getSisFirmwareVersion();
	attr.set_value(attr_sisFirmwareVersion_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_sisFirmwareVersion
}
//--------------------------------------------------------
/**
 *	Read attribute sisBoardVersion related method
 *	Description: the board version of the VME/PCI gateway
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_sisBoardVersion(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_sisBoardVersion(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_sisBoardVersion) ENABLED START -----*/
	//	Set the attribute value
	*attr_sisBoardVersion_read=(Tango::DevString)getSisBoardVersion();
	attr.set_value(attr_sisBoardVersion_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_sisBoardVersion
}
//--------------------------------------------------------
/**
 *	Read attribute zygoFirmwareVersion related method
 *	Description: the firmware version of the measurement board
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_zygoFirmwareVersion(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_zygoFirmwareVersion(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_zygoFirmwareVersion) ENABLED START -----*/
	//	Set the attribute value
	*attr_zygoFirmwareVersion_read =(Tango::DevString)getZygoFirmwareVersion();
	attr.set_value(attr_zygoFirmwareVersion_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_zygoFirmwareVersion
}
//--------------------------------------------------------
/**
 *	Read attribute zygoBoardVersion related method
 *	Description: the version of the measurement board
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_zygoBoardVersion(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_zygoBoardVersion(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_zygoBoardVersion) ENABLED START -----*/
	//	Set the attribute value
	*attr_zygoBoardVersion_read =(Tango::DevString)getZygoBoardVersion();
	attr.set_value(attr_zygoBoardVersion_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_zygoBoardVersion
}
//--------------------------------------------------------
/**
 *	Read attribute zygoSerialNumber related method
 *	Description: the serial number of the measurement board
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_zygoSerialNumber(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_zygoSerialNumber(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_zygoSerialNumber) ENABLED START -----*/
	//	Set the attribute value
	*attr_zygoSerialNumber_read =(Tango::DevString)getZygoSerialNumber();
	attr.set_value(attr_zygoSerialNumber_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_zygoSerialNumber
}
//--------------------------------------------------------
/**
 *	Read attribute continuousSamplingAxes related method
 *	Description: The axes on which to start/stop the continuous scan. enter axes number separated by coma and once finished insert a semi-colon at the end. e.g : 1,2,3;
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_continuousSamplingAxes(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_continuousSamplingAxes(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_continuousSamplingAxes) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_continuousSamplingAxes_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_continuousSamplingAxes
}
//--------------------------------------------------------
/**
 *	Write attribute continuousSamplingAxes related method
 *	Description: The axes on which to start/stop the continuous scan. enter axes number separated by coma and once finished insert a semi-colon at the end. e.g : 1,2,3;
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_continuousSamplingAxes(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::write_continuousSamplingAxes(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_continuousSamplingAxes) ENABLED START -----*/
	getAxesfromInputString(w_val, flyscanAxesCtr, flyscanAxesTab, attr_continuousSamplingAxes_read);
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_continuousSamplingAxes
}

//--------------------------------------------------------
/**
 *	Read attribute continuousSamplingSize related method
 *	Description: this property is used during continuous acquisition to determine the number of sampling points to acquire from the board
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_continuousSamplingSize(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_continuousSamplingSize(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_continuousSamplingSize) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_continuousSamplingSize_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_continuousSamplingSize
}
//--------------------------------------------------------
/**
 *	Write attribute continuousSamplingSize related method
 *	Description: this property is used during continuous acquisition to determine the number of sampling points to acquire from the board
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_continuousSamplingSize(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::write_continuousSamplingSize(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevULong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_continuousSamplingSize) ENABLED START -----*/
	*attr_continuousSamplingSize_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_continuousSamplingSize
}
//--------------------------------------------------------
/**
 *	Read attribute cecAxes related method
 *	Description: The axes on which to activate/deactivate cyclic error compensation. enter axes number separated by coma and once finished insert a semi-colon at the end. e.g : 1,2,3;
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_cecAxes(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_cecAxes(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_cecAxes) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_cecAxes_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_cecAxes
}
//--------------------------------------------------------
/**
 *	Write attribute cecAxes related method
 *	Description: The axes on which to activate/deactivate cyclic error compensation. enter axes number separated by coma and once finished insert a semi-colon at the end. e.g : 1,2,3;
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_cecAxes(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::write_cecAxes(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_cecAxes) ENABLED START -----*/
	
	getAxesfromInputString(w_val, cecAxesCtr, cecAxesTab,attr_cecAxes_read);
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_cecAxes
}
//--------------------------------------------------------
/**
 *	Read attribute continuousScanPositionMeanValue related method
 *	Description: the position`s mean value of the continuous scan
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_continuousScanPositionMeanValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_continuousScanPositionMeanValue(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_continuousScanPositionMeanValue) ENABLED START -----*/
	//	Set the attribute value
	*attr_continuousScanPositionMeanValue_read = (Tango::DevDouble)(*meanVal);
	attr.set_value(attr_continuousScanPositionMeanValue_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_continuousScanPositionMeanValue
}
//--------------------------------------------------------
/**
 *	Read attribute continuousScanPositionStdDev related method
 *	Description: the position`s standard deviation value of the continuous scan
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_continuousScanPositionStdDev(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_continuousScanPositionStdDev(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_continuousScanPositionStdDev) ENABLED START -----*/
	//	Set the attribute value
	*attr_continuousScanPositionStdDev_read = (Tango::DevDouble)(*stdDevVal);
	attr.set_value(attr_continuousScanPositionStdDev_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_continuousScanPositionStdDev
}
//--------------------------------------------------------
/**
 *	Read attribute fifoMode related method
 *	Description: choose the mode(auto/manual) in Fifo continuous acquisition. In manual mode, the number of samples to record is not taken into account by the device and the user has to execute stopContinuousAcquisition in order to halt the acquisition. In Auto mode, the device takes into account the number of samples and will stop recording once this number has been reached.
 *
 *	Data type:	Tango::DevEnum (fifoModeEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::read_fifoMode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::read_fifoMode(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::read_fifoMode) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_fifoMode_read);
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::read_fifoMode
}
//--------------------------------------------------------
/**
 *	Write attribute fifoMode related method
 *	Description: choose the mode(auto/manual) in Fifo continuous acquisition. In manual mode, the number of samples to record is not taken into account by the device and the user has to execute stopContinuousAcquisition in order to halt the acquisition. In Auto mode, the device takes into account the number of samples and will stop recording once this number has been reached.
 *
 *	Data type:	Tango::DevEnum (fifoModeEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ZygoZMI4104C::write_fifoMode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ZygoZMI4104C::write_fifoMode(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ZygoZMI4104C::write_fifoMode) ENABLED START -----*/
	*attr_fifoMode_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::write_fifoMode
}

//--------------------------------------------------------
/**
 *	Method      : ZygoZMI4104C::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void ZygoZMI4104C::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(ZygoZMI4104C::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command State related method
 *	Description: This command gets the device state (stored in its device_state data member) and returns it to the caller.
 *
 *	@returns Device state
 */
//--------------------------------------------------------
Tango::DevState ZygoZMI4104C::dev_state()
{
	DEBUG_STREAM << "ZygoZMI4104C::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::dev_state) ENABLED START -----*/
	
	Tango::DevState	argout = Tango::UNKNOWN; // replace by your own algorithm
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::dev_state
	set_state(argout);    // Give the state to Tango.
	if (argout!=Tango::ALARM)
		Tango::DeviceImpl::dev_state();
	return get_state();  // Return it after Tango management.
}
//--------------------------------------------------------
/**
 *	Command Status related method
 *	Description: This command gets the device status (stored in its device_status data member) and returns it to the caller.
 *
 *	@returns Device status
 */
//--------------------------------------------------------
Tango::ConstDevString ZygoZMI4104C::dev_status()
{
	DEBUG_STREAM << "ZygoZMI4104C::Status()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::dev_status) ENABLED START -----*/
	
	//string	status = "Device is OK";
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::dev_status
	//set_status(status);               // Give the status to Tango.
	return Tango::DeviceImpl::dev_status();  // Return it.
}
//--------------------------------------------------------
/**
 *	Command ResetMeasurementAxis related method
 *	Description: reset the input measurement axis
 *
 *	@param argin axis number to reset
 */
//--------------------------------------------------------
void ZygoZMI4104C::reset_measurement_axis(Tango::DevUShort argin)
{
	DEBUG_STREAM << "ZygoZMI4104C::ResetMeasurementAxis()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::reset_measurement_axis) ENABLED START -----*/
	resetAxis((unsigned char)argin);
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::reset_measurement_axis
}
//--------------------------------------------------------
/**
 *	Command StartContinuousAcquisition related method
 *	Description: Start the continuous acquisition based on sampling frequency and continuousScanSize board properties. 
 *               In the Auto mode, the user should provide sampling frequency as well as the number of sample to acquire (samplingFrequency and samplingSize). The acquisition time will be determined by the board.
 *               In the manual mode, the user only provide the frequency. the size and the integration time will depend on the time at which the user press the  StopAcquisition button.
 *
 *	@param argin The input is the continuous acquisitio mode: false for Automatic and true for Manual
 *	@returns the return code
 */
//--------------------------------------------------------
Tango::DevShort ZygoZMI4104C::start_continuous_acquisition(Tango::DevBoolean argin)
{
	Tango::DevShort argout;
	DEBUG_STREAM << "ZygoZMI4104C::StartContinuousAcquisition()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::start_continuous_acquisition) ENABLED START -----*/
	
	std::thread sca_thread(ZygoZMI4104C::sca_thread_function,this,argin);
	sca_thread.detach();
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::start_continuous_acquisition
	return argout;
}
int ZygoZMI4104C::sca_thread_function(Tango::DevBoolean argin){
	flyscanPath = (char*)calloc(256, sizeof(char));
	flyscanPath[0]='.';
	flyscanPath[1]='\0';
	std::cerr << "start flyscan with arg " << argin << std::endl;
	string	status = "Setting up continuous acquisition...";
	set_status(status);               // Give the status to Tango.
	
	if(!((bool)argin))
	{
		//	Add your own code
		
		//*/
		try
		{
		if((*attr_continuousSamplingSize_read)<256){
			(*attr_continuousSamplingSize_read)=256;
			//qDebug()<<"setting size to the min: 256";
			//emit flyscanErrorCode(-101);
			std::cerr << "continuous scan size is a bacth of 256 samples" << std::endl;
		}
		if((*attr_continuousSamplingSize_read)>NBR_RAM_PAGES*256){
			(*attr_continuousSamplingSize_read)=NBR_RAM_PAGES*256;
			//qDebug()<<"setting size to the max: "<< NBR_RAM_PAGES*256;
			std::cerr << "continuous scan size on one axis can not be greater than of 64*256 samples" << std::endl;
			//emit flyscanErrorCode(-102);
		}
		if((*attr_continuousSamplingSize_read)>NBR_RAM_PAGES*128 && flyscanAxesCtr>2){
			(*attr_continuousSamplingSize_read)=NBR_RAM_PAGES*128;
			//qDebug()<<"setting size to the max: "<< NBR_RAM_PAGES*128;
			std::cerr << "continuous scan size on more than 3 axes can not be greater than of 64*128 samples" << std::endl;
			//emit flyscanErrorCode(-103);
		}
		//*/
		if (!(base_A24D32_ptr = (unsigned int*)calloc((size_t)(((*attr_continuousSamplingSize_read)*1.5*flyscanAxesCtr)), sizeof(unsigned int)))){

			zygoLogWarn("can not allocate memory on the host machine");
			throw invalid_argument("can not allocate memory on the host machine");
			//emit flyscanErrorCode(-105);
			//emit flyscanProcTerm();
		}
		if(flyscanAxesCtr>1){
			if (!(base_A24D32_FR_ptr = (unsigned int*)calloc((size_t)(((*attr_continuousSamplingSize_read)*1.5*flyscanAxesCtr)), sizeof(unsigned int)))){
				//dev_mutex.unlock();
				//Ltimer->stop();
				zygoLogWarn("can not allocate memory on the host machine");
				throw invalid_argument("can not allocate memory on the host machine");
				//emit flyscanErrorCode(-105);
				//emit flyscanProcTerm();
			}
		}
			if (configureFlyscan(  (uint8_t)flyscanAxesCtr, *attr_samplingFrequency_read, 1) != RET_SUCCESS){
				throw invalid_argument("connfiguration of continuous acquisition has failed!!!");
			}

			unsigned int ramDataSize = *attr_continuousSamplingSize_read/256;
			if(flyscanAxesCtr>2){
				//ramDataSize = (flyscanSizeValue*2>16384)?flyscanSizeValue*2:16384;
				ramDataSize = *attr_continuousSamplingSize_read/(4*256);
			}
			if (getFlyscanData(  base_A24D32_FR_ptr, base_A24D32_ptr, (uint32_t*)&flyscanAxesCtr,ramDataSize) != RET_SUCCESS)
			{
				//dev_mutex.unlock();
				//Ltimer->stop();
				//emit flyscanErrorCode(-106);
				//emit flyscanProcTerm();
				throw invalid_argument("Getting RAMDATA failed");
			}
			if (processRamData(flyscanAxesCtr, base_A24D32_FR_ptr, base_A24D32_ptr, ramDataSize, flyscanPath,(double*)meanVal, (double*)stdDevVal) != RET_SUCCESS)
			{
				//Ltimer->stop();
				//emit flyscanErrorCode(-107);
				//emit flyscanProcTerm();
				throw invalid_argument("Processing RAMDATA failed");
			}
		}
		
		catch(const invalid_argument& msg)
		{
			std::cerr << "exception : " << msg.what() << std::endl;
			set_status(msg.what());               // Give the status to Tango.
			return RET_FAILED;
		}
	
	}
	else{
		try{
			
			int ret_code=0, mysize=0;
			bool ovf=0;
			fifoParam* flyscanFifoParam = new fifoParam;
			//flyscanFifoParam->acqTime=flyscanTimeValue;
			flyscanFifoParam->freq=*attr_samplingFrequency_read;
			flyscanFifoParam->nbrPts=*attr_continuousSamplingSize_read;
			if(*attr_fifoMode_read){
				mysize = 0x10000000;//128Mo
			}
			else{
				mysize = (UINT)(sizeof(UINT) * ((*attr_continuousSamplingSize_read)*1.5*flyscanAxesCtr));
			}

			if (!(base_A24D32_ptr = (uint32_t*)calloc(mysize, sizeof(unsigned int)))){
				zygoLogWarn("can not allocate memory on the host machine");
				//emit flyscanErrorCode(-105);
				//emit flyscanProcTerm();
				delete flyscanFifoParam;
				perror("base_A32D32_ptr");
				throw invalid_argument(strerror(errno));
			}
			ovf_flag:
			set_status("Setting up fifo flyscan\n"); 
			if (configureFifoFlyscan(flyscanFifoParam,base_A24D32_ptr,(uint8_t*)flyscanAxesTab, (uint32_t*)&flyscanAxesCtr, &ret_code, *attr_fifoMode_read) != RET_SUCCESS){
				//dataProcessing::dev_mutex.unlock();
				//qDebug()<<"fifo config failed";
				//emit flyscanErrorCode(-99);
				//emit flyscanProcTerm();
				//delete (base_A24D32_ptr);
				delete flyscanFifoParam;
				throw invalid_argument("Configure Fifo flyscan failed");
			}
			else
			{
				//emit flyscanErrorCode(1); // currently processing
				//dataProcessing::dev_mutex.unlock();
				if(ret_code==-100){
					//qDebug()<<"overlapping detected";
					//emit flyscanErrorCode(ret_code);
					set_status("Overlapping detected, somme data may have been corrupted "); 
				}
				if(ret_code==100){
					//qDebug()<<"RAM oveflow detected, allocating more space";
					//emit flyscanErrorCode(ret_code);
					ovf=1;
					set_status("Overflow on dynamic memory allocated to stored samples"); 
				}

				//dataProcessing::dev_mutex.lock();
				set_status("Processing fifo data"); 
				if (processFifoData(flyscanAxesCtr, (uint8_t*)flyscanAxesTab, base_A24D32_ptr, flyscanFifoParam->nbrPts, (uint8_t*)flyscanPath,meanVal, stdDevVal) != RET_SUCCESS){
					//dataProcessing::dev_mutex.unlock();
					//emit flyscanErrorCode(-107);
					//emit flyscanProcTerm();
					//delete (base_A24D32_ptr);
					delete flyscanFifoParam;
					throw invalid_argument("failed to process fifo data");
				}
				if(ovf){
					ovf=0;
					memset(base_A24D32_ptr, 0, mysize);
					goto ovf_flag;
				}

				//dataProcessing::dev_mutex.unlock();
			}
		}		
		catch(const invalid_argument& msg)
		{
			std::cerr << "exception : " << msg.what() << std::endl;
			set_status(msg.what());               // Give the status to Tango.
			return RET_FAILED;
		}
	
	}
	argout = RET_SUCCESS;
}
//--------------------------------------------------------
/**
 *	Command StopContinnuousAcquisition related method
 *	Description: stop the current continuous acquisition in manual mode
 *
 *	@returns the return code
 */
//--------------------------------------------------------
Tango::DevShort ZygoZMI4104C::stop_continnuous_acquisition()
{
	Tango::DevShort argout;
	DEBUG_STREAM << "ZygoZMI4104C::StopContinnuousAcquisition()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::stop_continnuous_acquisition) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::stop_continnuous_acquisition
	return argout;
}
//--------------------------------------------------------
/**
 *	Command EnableCyclicErrorCompensation related method
 *	Description: This command calculates and subtracts the cyclic errors 0 and N. The calculation is performed while motion occurs, and the
 *               coefficients are stored and used to correct for the cyclic errors when motion is at a velocity below
 *               a predefined threshold.
 *
 *	@param argin the axis number on which to enable compensation
 *	@returns the return code
 */
//--------------------------------------------------------
Tango::DevShort ZygoZMI4104C::enable_cyclic_error_compensation(Tango::DevShort argin)
{
	Tango::DevShort argout;
	DEBUG_STREAM << "ZygoZMI4104C::EnableCyclicErrorCompensation()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::enable_cyclic_error_compensation) ENABLED START -----*/
	
	//	Add your own code
	    //qDebug()<<"config started ";
	for(int i=0;i< (sizeof(cecAxesTab)/sizeof(cecAxesTab[0]));i++){
		if(!cecAxesTab[i])
			break;
		argout=configureCecHardware(  (uint8_t)cecAxesTab[i], ceVelMin, ceVelMax);	
		if(argout!=RET_SUCCESS)
		{
			*attr_cecAxes_read="NO_AXIS_SELECTED";
			set_status("Cyclic error compensation failed");
			break;
		}
	}
	

    //qDebug()<<"config terminated ";
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::enable_cyclic_error_compensation
	return argout;
}
//--------------------------------------------------------
/**
 *	Command DisableCyclicErrorCompensation related method
 *	Description: This command disable cyclic error compensation on the specified axis
 *
 *	@param argin the axis number on which to disable compensation
 *	@returns the return code
 */
//--------------------------------------------------------
Tango::DevShort ZygoZMI4104C::disable_cyclic_error_compensation(Tango::DevShort argin)
{
	Tango::DevShort argout;
	DEBUG_STREAM << "ZygoZMI4104C::DisableCyclicErrorCompensation()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::disable_cyclic_error_compensation) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::disable_cyclic_error_compensation
	return argout;
}
//--------------------------------------------------------
/**
 *	Command ResetMeasurementSystem related method
 *	Description: This command reset all the measurement system including VME/PCIe gateway
 *
 */
//--------------------------------------------------------
void ZygoZMI4104C::reset_measurement_system()
{
	DEBUG_STREAM << "ZygoZMI4104C::ResetMeasurementSystem()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(ZygoZMI4104C::reset_measurement_system) ENABLED START -----*/
	
	//	Add your own code
	vme_system_reset();
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::reset_measurement_system
}
//--------------------------------------------------------
/**
 *	Method      : ZygoZMI4104C::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void ZygoZMI4104C::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(ZygoZMI4104C::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::add_dynamic_commands
}

/*----- PROTECTED REGION ID(ZygoZMI4104C::namespace_ending) ENABLED START -----*/

//	Additional Methods
void ZygoZMI4104C::vme_system_reset(){
	BIAS_MODE bias_mode = BIAS_CONSTANT_VOLT_MODE;
    //zygoLogInfo("VME SYSTEM RESET!!!\n");
    if(initSisBoards( )!= RET_SUCCESS) zygoLogFatal("Failed to initialize SIS boards\n");
    //Sleep(10);
    if(initZmiBoards( ) != RET_SUCCESS) zygoLogFatal("Failed to initialize ZMI board\n");
    if(initAxis(  bias_mode) != RET_SUCCESS) zygoLogFatal("Failed to initialize axis\n");
    enableDoublePassInterferometer();
	DEBUG_STREAM << "vme system reset complete  - " << endl;

}
int ZygoZMI4104C::getLEDsColor(unsigned char* ledsColor){
    //qDebug()<<"running refreshLEDsStatus()";

    getLedsErrorStatus( ledsErrorStatus);
    //qDebug()<<ledsErrorStatus;
    getLedsStatus( ledsStatus);

    //qDebug()<<*ledsStatus;
    for (int ledi=0;ledi<5 ;ledi++ ) {
       if(ledsStatus[ledi]){
            if(ledsErrorStatus[ledi]){
                ledsColor[ledi] =2;//"yellow";
            }
            else
                ledsColor[ledi] = 1;//"rgb(37, 255, 81)";//green
       }
            else
                ledsColor[ledi] = 0;//"black";

}
    return 0;
}// //--------------------------------------------------------

void ZygoZMI4104C::localSetBiasMode(Tango::DevUChar axis, Tango::DevString w_val)
{
	int res =0;
	int len =6;
	int len_wval = ((std::string)w_val).length();
	for(int i=0; i<len_wval;i++){
			w_val[i] = (char)(toupper(w_val[i]));
		}
		std::cerr<<"w_val in biasmode is " << w_val << std::endl;
		std::cerr<<"len is " << len << std::endl;
	try
	{
		for(int i=0; i<len;i++)
		{
			res = ((std::string)w_val).compare(biasModeString[i]);
			std::cerr<<"res is " << res << std::endl;
			if(!res){
				if(setBiasMode(axis, i)!=RET_SUCCESS)
					throw std::invalid_argument("Failed to set bias mode");
				break;
			}
		}
		if(i>=len)
			throw std::invalid_argument("Unknow bias mode. Please read the attribute description");
	}
	catch(const invalid_argument& msg)
	{
		std::cerr << "exception: " << msg.what() << std::endl;
	}
}


int ZygoZMI4104C::getAxesfromInputString(Tango::DevString	val, Tango::DevUShort axisCtr, Tango::DevUShort	*axisTab,Tango::DevString *attr_read){
	std::string w_val = (std::string)val;
	int len = ((std::string)w_val).length(), nbr=0;
	char tempStr[100];
	std::string 		value;
	std::set<std::string> 			myStr;
	axisCtr = 0;
	*attr_read="";
	try{
			
		while(w_val.length()>0) {
			size_t posV = w_val.find_first_of(',');
			int nbr = -1;
			if( posV>=0 ) {
				value = w_val.substr(0, posV);
				nbr = atoi(value.c_str());
				w_val = w_val.substr(posV+1,w_val.length());
			}
			else {
				nbr = atoi(w_val.c_str());
				w_val = "";
			}
			
			if((nbr<1) || (nbr>4))//value is not between 1 and 4
			{
				continue;
			}
			axisTab[axisCtr]=nbr;
			sprintf(tempStr, "AXIS%u | ",nbr);
			myStr.insert(tempStr);
			axisCtr=(Tango::DevUShort)myStr.size();
			if(axisCtr>=4)
			{
				axisCtr=4;
				throw std::invalid_argument("No more more axis can be read\n"); 
				break;
			}
			//TODO
		}
	}
	catch(const invalid_argument& msg)
	{
		std::cerr << "exception:" << msg.what() <<endl;
		//THROW_DEVFAILED("DECODE_ERROR", msg.what(), "ZygoZMI4104C::getAxesfromInputString");
		
	}

	std::cerr << "axisCtr is " << axisCtr <<endl;
	if(!axisCtr)
		*attr_read = "NO_AXIS_SELECTED";
	else
	{
		std::ostringstream s;
		std::copy(myStr.begin(),myStr.end(), std::ostream_iterator<std::string>(s,""));
		std::string result = s.str();
		*attr_read =  (Tango::DevString)(result.c_str()) ;
		std::cerr << "myStr is  " << result <<std::endl;
	}
	return RET_SUCCESS;
}
/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::namespace_ending
} //	namespace
