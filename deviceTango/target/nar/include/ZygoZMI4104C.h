/*----- PROTECTED REGION ID(ZygoZMI4104C.h) ENABLED START -----*/
//=============================================================================
//
// file :        ZygoZMI4104C.h
//
// description : Include file for the ZygoZMI4104C class
//
// project :     zygoZMI4104C
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef ZygoZMI4104C_H
#define ZygoZMI4104C_H

#include <tango.h>

#include <yat4tango/PropertyHelper.h>
#include <yat4tango/DeviceInfo.h>
#include <yat4tango/DynamicInterfaceManager.h>




/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C.h

/**
 *  ZygoZMI4104C class description:
 *    Tango device for the ZMI 4104C interferometer
 */

namespace ZygoZMI4104C_ns
{
/*----- PROTECTED REGION ID(ZygoZMI4104C::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::Additional Class Declarations

class ZygoZMI4104C : public Tango::Device_4Impl
{

/*----- PROTECTED REGION ID(ZygoZMI4104C::Data Members) ENABLED START -----*/

//	Add your own data members
	//- state & status stuff
	bool m_is_device_initialized;
	// status message used to build status
	std::stringstream m_status_message;
	// the dynamic attribute manager
	yat4tango::DynamicAttributeManager m_dynamic_attr_mng;
	Tango::DevULong	m_data;
/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::Data Members

//	Device property data members
public:
	//	ZygoBoardVersion:	hold the measurement board version
	string	zygoBoardVersion;
	//	ZygoBoardSerialNumber:	hold the measurement board serial Number
	string	zygoBoardSerialNumber;
	//	ZygoFirmwareVersion:	hold the measurement board firmware version
	string	zygoFirmwareVersion;
	//	ZygoBoardType:	hold the measurement board type
	string	zygoBoardType;
	//	PciVmeGatewayFirmwareVersion:	hold the VME/PCI gateway firmware version
	string	pciVmeGatewayFirmwareVersion;
	//	PciVmeGatewayBoardVersion:	hold the VME/PCI gateway board version
	string	pciVmeGatewayBoardVersion;

//	Attribute data members
public:
	Tango::DevULong	*attr_baseAddress_read;
	Tango::DevBoolean	*attr_interferometerType_read;
	Tango::DevBoolean	*attr_positionPrecision_read;
	Tango::DevBoolean	*attr_sampleSourceClock_read;
	Tango::DevBoolean	*attr_resetSourceClock_read;
	Tango::DevDouble	*attr_samplingFrequency_read;
	Tango::DevUShort	*attr_biasMode_read;
	Tango::DevBoolean	*attr_cecState_read;
	Tango::DevDouble	*attr_continuousScanIntegrationTime_read;
	Tango::DevDouble	*attr_continuousScanFrequency_read;
	Tango::DevUShort	*attr_continuousScanSize_read;
	Tango::DevDouble	*attr_axisPositions_read;
	Tango::DevDouble	*attr_axisOpticalPowers_read;
	Tango::DevDouble	*attr_axisVelocities_read;
	Tango::DevDouble	*attr_axisPositionOffsets_read;
	Tango::DevDouble	*attr_axisPositionPresets_read;
	Tango::DevBoolean	*attr_ledsStatus_read;
	Tango::DevUShort	*attr_continuousScanAxisTab_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	ZygoZMI4104C(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	ZygoZMI4104C(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	ZygoZMI4104C(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */	
	~ZygoZMI4104C() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : ZygoZMI4104C::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute baseAddress related methods
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_baseAddress(Tango::Attribute &attr);
	virtual void write_baseAddress(Tango::WAttribute &attr);
	virtual bool is_baseAddress_allowed(Tango::AttReqType type);
/**
 *	Attribute interferometerType related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_interferometerType(Tango::Attribute &attr);
	virtual void write_interferometerType(Tango::WAttribute &attr);
	virtual bool is_interferometerType_allowed(Tango::AttReqType type);
/**
 *	Attribute positionPrecision related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_positionPrecision(Tango::Attribute &attr);
	virtual void write_positionPrecision(Tango::WAttribute &attr);
	virtual bool is_positionPrecision_allowed(Tango::AttReqType type);
/**
 *	Attribute sampleSourceClock related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_sampleSourceClock(Tango::Attribute &attr);
	virtual void write_sampleSourceClock(Tango::WAttribute &attr);
	virtual bool is_sampleSourceClock_allowed(Tango::AttReqType type);
/**
 *	Attribute resetSourceClock related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_resetSourceClock(Tango::Attribute &attr);
	virtual void write_resetSourceClock(Tango::WAttribute &attr);
	virtual bool is_resetSourceClock_allowed(Tango::AttReqType type);
/**
 *	Attribute samplingFrequency related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_samplingFrequency(Tango::Attribute &attr);
	virtual void write_samplingFrequency(Tango::WAttribute &attr);
	virtual bool is_samplingFrequency_allowed(Tango::AttReqType type);
/**
 *	Attribute biasMode related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_biasMode(Tango::Attribute &attr);
	virtual void write_biasMode(Tango::WAttribute &attr);
	virtual bool is_biasMode_allowed(Tango::AttReqType type);
/**
 *	Attribute cecState related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_cecState(Tango::Attribute &attr);
	virtual void write_cecState(Tango::WAttribute &attr);
	virtual bool is_cecState_allowed(Tango::AttReqType type);
/**
 *	Attribute continuousScanIntegrationTime related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_continuousScanIntegrationTime(Tango::Attribute &attr);
	virtual void write_continuousScanIntegrationTime(Tango::WAttribute &attr);
	virtual bool is_continuousScanIntegrationTime_allowed(Tango::AttReqType type);
/**
 *	Attribute continuousScanFrequency related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_continuousScanFrequency(Tango::Attribute &attr);
	virtual void write_continuousScanFrequency(Tango::WAttribute &attr);
	virtual bool is_continuousScanFrequency_allowed(Tango::AttReqType type);
/**
 *	Attribute continuousScanSize related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_continuousScanSize(Tango::Attribute &attr);
	virtual void write_continuousScanSize(Tango::WAttribute &attr);
	virtual bool is_continuousScanSize_allowed(Tango::AttReqType type);
/**
 *	Attribute axisPositions related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 4
 */
	virtual void read_axisPositions(Tango::Attribute &attr);
	virtual bool is_axisPositions_allowed(Tango::AttReqType type);
/**
 *	Attribute axisOpticalPowers related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 4
 */
	virtual void read_axisOpticalPowers(Tango::Attribute &attr);
	virtual bool is_axisOpticalPowers_allowed(Tango::AttReqType type);
/**
 *	Attribute axisVelocities related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 4
 */
	virtual void read_axisVelocities(Tango::Attribute &attr);
	virtual bool is_axisVelocities_allowed(Tango::AttReqType type);
/**
 *	Attribute axisPositionOffsets related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 4
 */
	virtual void read_axisPositionOffsets(Tango::Attribute &attr);
	virtual void write_axisPositionOffsets(Tango::WAttribute &attr);
	virtual bool is_axisPositionOffsets_allowed(Tango::AttReqType type);
/**
 *	Attribute axisPositionPresets related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 4
 */
	virtual void read_axisPositionPresets(Tango::Attribute &attr);
	virtual void write_axisPositionPresets(Tango::WAttribute &attr);
	virtual bool is_axisPositionPresets_allowed(Tango::AttReqType type);
/**
 *	Attribute ledsStatus related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Spectrum max = 5
 */
	virtual void read_ledsStatus(Tango::Attribute &attr);
	virtual bool is_ledsStatus_allowed(Tango::AttReqType type);
/**
 *	Attribute continuousScanAxisTab related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Spectrum max = 4
 */
	virtual void read_continuousScanAxisTab(Tango::Attribute &attr);
	virtual void write_continuousScanAxisTab(Tango::WAttribute &attr);
	virtual bool is_continuousScanAxisTab_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : ZygoZMI4104C::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();



//	Command related methods
public:
	/**
	 *	Command ReadPosition related method
	 *	Description: read the value of position on a specific axis
	 *
	 *	@param argin axis to read position on
	 *	@returns the position value
	 */
	virtual Tango::DevDouble read_position(Tango::DevUShort argin);
	virtual bool is_ReadPosition_allowed(const CORBA::Any &any);
	/**
	 *	Command ReadVelocity related method
	 *	Description: read the velocity on a specific axis
	 *
	 *	@param argin axis to read velocity on
	 *	@returns the velocity value
	 */
	virtual Tango::DevDouble read_velocity(Tango::DevUShort argin);
	virtual bool is_ReadVelocity_allowed(const CORBA::Any &any);
	/**
	 *	Command ReadOpticalPower related method
	 *	Description: read the optical power on a specifc axis
	 *
	 *	@param argin axis to read optical power on
	 *	@returns the optical power value
	 */
	virtual Tango::DevDouble read_optical_power(Tango::DevUShort argin);
	virtual bool is_ReadOpticalPower_allowed(const CORBA::Any &any);
	/**
	 *	Command ResetAxis related method
	 *	Description: reset a specific axis
	 *
	 *	@param argin axis to reset
	 */
	virtual void reset_axis(Tango::DevUShort argin);
	virtual bool is_ResetAxis_allowed(const CORBA::Any &any);
	/**
	 *	Command InitializeZMISystem related method
	 *	Description: reinitialize the overall measurement system
	 *
	 */
	virtual void initialize_zmisystem();
	virtual bool is_InitializeZMISystem_allowed(const CORBA::Any &any);
	/**
	 *	Command EnableCyclicErrorCorrection related method
	 *	Description: enable automatic cyclic error correction on all measurement axis
	 *
	 */
	virtual void enable_cyclic_error_correction();
	virtual bool is_EnableCyclicErrorCorrection_allowed(const CORBA::Any &any);
	/**
	 *	Command DisableCyclicErrorCorrection related method
	 *	Description: disable automatic cyclic error correction on all measurement axis
	 *
	 */
	virtual void disable_cyclic_error_correction();
	virtual bool is_DisableCyclicErrorCorrection_allowed(const CORBA::Any &any);
	/**
	 *	Command StartContinuousScan related method
	 *	Description: start the continuous scan on axis selected by continuousScanAxisTab or by continuousScanAxisNbr. the command also use continuousScanIntegrationTime, continuousScanFrequency attribute.
	 *
	 *	@param argin type of continuous scan to start
	 */
	virtual void start_continuous_scan(Tango::DevBoolean argin);
	virtual bool is_StartContinuousScan_allowed(const CORBA::Any &any);


/*----- PROTECTED REGION ID(ZygoZMI4104C::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
void vmeSystemReset();
/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::Additional Method prototypes
};

/*----- PROTECTED REGION ID(ZygoZMI4104C::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::Additional Classes Definitions

}	//	End of namespace

#endif   //	ZygoZMI4104C_H
