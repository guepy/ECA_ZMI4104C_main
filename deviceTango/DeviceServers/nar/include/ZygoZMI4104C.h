/*----- PROTECTED REGION ID(ZygoZMI4104C.h) ENABLED START -----*/
//=============================================================================
//
// file :        ZygoZMI4104C.h
//
// description : Include file for the ZygoZMI4104C class
//
// project :     ZygoZMI4104C
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef ZygoZMI4104C_H
#define ZygoZMI4104C_H
#include <tango.h>
#include <yat4tango/PropertyHelper.h>
#include <yat4tango/DeviceInfo.h>
#include <yat4tango/DynamicInterfaceManager.h>
#include <stdexcept>
#include <string>
#include <thread>
#include <mutex>

/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C.h

/**
 *  ZygoZMI4104C class description:
 *    
 */

namespace ZygoZMI4104C_ns
{
enum _currentPrecisionEnum {
	_REG32,
	_REG37,
} ;
typedef _currentPrecisionEnum currentPrecisionEnum;

enum _fifoModeEnum {
	_AUTO,
	_MANUAL,
} ;
typedef _fifoModeEnum fifoModeEnum;

/*----- PROTECTED REGION ID(ZygoZMI4104C::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::Additional Class Declarations

class ZygoZMI4104C : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(ZygoZMI4104C::Data Members) ENABLED START -----*/

//	Add your own data members
	//- state & status stuff
	bool m_is_device_initialized;
	// status message used to build status
	std::stringstream m_status_message;
	// the dynamic attribute manager
	yat4tango::DynamicAttributeManager m_dynamic_attr_mng;
	Tango::DevULong	m_data;

	Tango::DevUChar		*ledsColor;
	Tango::DevString 	*ledsColorString;
	Tango::DevDouble 	*optPwr;
	Tango::DevString 	*biasModeString;
	Tango::DevString 	*interferometerConfigurationString;	
	static bool 		*ledsErrorStatus,*ledsStatus, *init_done;
	uint32_t	 		flyscanAxesCtr, cecAxesCtr;
	uint8_t				*flyscanAxesTab, *cecAxesTab;
	char				flyscanPath[2];
	static double 		*meanVal, *stdDevVal;
	static int			ceVelMin, ceVelMax;
	std::ostringstream  status_msg_stream;
	Tango::DevState		dev_state_val;
	Tango::DevBoolean	status_msg_ok;
	std::stringstream	dev_status_msg;
	yat::Mutex			dev_status_msg_key;
	std::mutex			flyscan_param_key;
	Tango::DevBoolean 	m_status_retrieved;
	std::string			attr_continuousSamplingAxes,attr_cecAxes;
/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::Data Members

//	Device property data members
public:
	//	baseAddress:	the address of the measurement axis 3
	Tango::DevULong	baseAddress;

//	Attribute data members
public:
	Tango::DevULong	*attr_samplingFrequency_read;
	Tango::DevString	*attr_axis1LedState_read;
	Tango::DevString	*attr_axis2LedState_read;
	Tango::DevString	*attr_axis3LedState_read;
	Tango::DevString	*attr_axis4LedState_read;
	Tango::DevString	*attr_referenceAxisLedState_read;
	Tango::DevShort	*attr_currentPrecision_read;
	Tango::DevDouble	*attr_axis1PositionValue_read;
	Tango::DevDouble	*attr_axis2PositionValue_read;
	Tango::DevDouble	*attr_axis3PositionValue_read;
	Tango::DevDouble	*attr_axis4PositionValue_read;
	Tango::DevDouble	*attr_axis1OpticalPowerValue_read;
	Tango::DevDouble	*attr_axis2OpticalPowerValue_read;
	Tango::DevDouble	*attr_axis3OpticalPowerValue_read;
	Tango::DevDouble	*attr_axis4OpticalPowerValue_read;
	Tango::DevDouble	*attr_axis1OffsetPositionValue_read;
	Tango::DevDouble	*attr_axis2OffsetPositionValue_read;
	Tango::DevDouble	*attr_axis3OffsetPositionValue_read;
	Tango::DevDouble	*attr_axis4OffsetPositionValue_read;
	Tango::DevDouble	*attr_axis1PresetPositionValue_read;
	Tango::DevDouble	*attr_axis2PresetPositionValue_read;
	Tango::DevDouble	*attr_axis3PresetPositionValue_read;
	Tango::DevDouble	*attr_axis4PresetPositionValue_read;
	Tango::DevString	*attr_axis1BiasMode_read;
	Tango::DevString	*attr_axis2BiasMode_read;
	Tango::DevString	*attr_axis3BiasMode_read;
	Tango::DevString	*attr_axis4BiasMode_read;
	Tango::DevString	*attr_interferometerConfiguration_read;
	Tango::DevString	*attr_sisFirmwareVersion_read;
	Tango::DevString	*attr_sisBoardVersion_read;
	Tango::DevString	*attr_zygoFirmwareVersion_read;
	Tango::DevString	*attr_zygoBoardVersion_read;
	Tango::DevString	*attr_zygoSerialNumber_read;
	Tango::DevString	*attr_continuousSamplingAxes_read;
	Tango::DevULong	*attr_continuousSamplingSize_read;
	Tango::DevString	*attr_cecAxes_read;
	Tango::DevDouble	*attr_continuousScanPositionMeanValue_read;
	Tango::DevDouble	*attr_continuousScanPositionStdDev_read;
	Tango::DevShort	*attr_fifoMode_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	ZygoZMI4104C(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	ZygoZMI4104C(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	ZygoZMI4104C(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~ZygoZMI4104C() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : ZygoZMI4104C::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : ZygoZMI4104C::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute samplingFrequency related methods
 *	Description: 
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_samplingFrequency(Tango::Attribute &attr);
	virtual void write_samplingFrequency(Tango::WAttribute &attr);
	virtual bool is_samplingFrequency_allowed(Tango::AttReqType type);
/**
 *	Attribute axis1LedState related methods
 *	Description: the state of the error LED on axis 1
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_axis1LedState(Tango::Attribute &attr);
	virtual bool is_axis1LedState_allowed(Tango::AttReqType type);
/**
 *	Attribute axis2LedState related methods
 *	Description: The state of the error LED on axis 2
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_axis2LedState(Tango::Attribute &attr);
	virtual bool is_axis2LedState_allowed(Tango::AttReqType type);
/**
 *	Attribute axis3LedState related methods
 *	Description: The state of the error LED on axis 3
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_axis3LedState(Tango::Attribute &attr);
	virtual bool is_axis3LedState_allowed(Tango::AttReqType type);
/**
 *	Attribute axis4LedState related methods
 *	Description: The state of the error LED on axis 4
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_axis4LedState(Tango::Attribute &attr);
	virtual bool is_axis4LedState_allowed(Tango::AttReqType type);
/**
 *	Attribute referenceAxisLedState related methods
 *	Description: The state of the error LED on reference axis
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_referenceAxisLedState(Tango::Attribute &attr);
	virtual bool is_referenceAxisLedState_allowed(Tango::AttReqType type);
/**
 *	Attribute currentPrecision related methods
 *	Description: THE PRECISION OF POSITION VALUE REGISTER
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_currentPrecision(Tango::Attribute &attr);
	virtual void write_currentPrecision(Tango::WAttribute &attr);
	virtual bool is_currentPrecision_allowed(Tango::AttReqType type);
/**
 *	Attribute axis1PositionValue related methods
 *	Description: the position value measured on axis 1
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_axis1PositionValue(Tango::Attribute &attr);
	virtual bool is_axis1PositionValue_allowed(Tango::AttReqType type);
/**
 *	Attribute axis2PositionValue related methods
 *	Description: the position value measured on axis 2
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_axis2PositionValue(Tango::Attribute &attr);
	virtual bool is_axis2PositionValue_allowed(Tango::AttReqType type);
/**
 *	Attribute axis3PositionValue related methods
 *	Description: the position value measured on axis 3
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_axis3PositionValue(Tango::Attribute &attr);
	virtual bool is_axis3PositionValue_allowed(Tango::AttReqType type);
/**
 *	Attribute axis4PositionValue related methods
 *	Description: the position value measured on axis 4
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_axis4PositionValue(Tango::Attribute &attr);
	virtual bool is_axis4PositionValue_allowed(Tango::AttReqType type);
/**
 *	Attribute axis1OpticalPowerValue related methods
 *	Description: the optical power value measured on axis 1
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_axis1OpticalPowerValue(Tango::Attribute &attr);
	virtual bool is_axis1OpticalPowerValue_allowed(Tango::AttReqType type);
/**
 *	Attribute axis2OpticalPowerValue related methods
 *	Description: the optical power value measured on axis 2
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_axis2OpticalPowerValue(Tango::Attribute &attr);
	virtual bool is_axis2OpticalPowerValue_allowed(Tango::AttReqType type);
/**
 *	Attribute axis3OpticalPowerValue related methods
 *	Description: the optical power value measured on axis 3
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_axis3OpticalPowerValue(Tango::Attribute &attr);
	virtual bool is_axis3OpticalPowerValue_allowed(Tango::AttReqType type);
/**
 *	Attribute axis4OpticalPowerValue related methods
 *	Description: the optical power value measured on axis 4
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_axis4OpticalPowerValue(Tango::Attribute &attr);
	virtual bool is_axis4OpticalPowerValue_allowed(Tango::AttReqType type);
/**
 *	Attribute axis1OffsetPositionValue related methods
 *	Description: This contains the offset value that is subtracted from all position measurements on axis 1
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_axis1OffsetPositionValue(Tango::Attribute &attr);
	virtual void write_axis1OffsetPositionValue(Tango::WAttribute &attr);
	virtual bool is_axis1OffsetPositionValue_allowed(Tango::AttReqType type);
/**
 *	Attribute axis2OffsetPositionValue related methods
 *	Description: This contains the offset value that is subtracted from all position measurements on axis 2
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_axis2OffsetPositionValue(Tango::Attribute &attr);
	virtual void write_axis2OffsetPositionValue(Tango::WAttribute &attr);
	virtual bool is_axis2OffsetPositionValue_allowed(Tango::AttReqType type);
/**
 *	Attribute axis3OffsetPositionValue related methods
 *	Description: This contains the offset value that is subtracted from all position measurements on axis 3
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_axis3OffsetPositionValue(Tango::Attribute &attr);
	virtual void write_axis3OffsetPositionValue(Tango::WAttribute &attr);
	virtual bool is_axis3OffsetPositionValue_allowed(Tango::AttReqType type);
/**
 *	Attribute axis4OffsetPositionValue related methods
 *	Description: This contains the offset value that is subtracted from all position measurements on axis 4
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_axis4OffsetPositionValue(Tango::Attribute &attr);
	virtual void write_axis4OffsetPositionValue(Tango::WAttribute &attr);
	virtual bool is_axis4OffsetPositionValue_allowed(Tango::AttReqType type);
/**
 *	Attribute axis1PresetPositionValue related methods
 *	Description: This is the preset value that is loaded into the position register of axis 1
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_axis1PresetPositionValue(Tango::Attribute &attr);
	virtual void write_axis1PresetPositionValue(Tango::WAttribute &attr);
	virtual bool is_axis1PresetPositionValue_allowed(Tango::AttReqType type);
/**
 *	Attribute axis2PresetPositionValue related methods
 *	Description: This is the preset value that is loaded into the position register of axis 2
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_axis2PresetPositionValue(Tango::Attribute &attr);
	virtual void write_axis2PresetPositionValue(Tango::WAttribute &attr);
	virtual bool is_axis2PresetPositionValue_allowed(Tango::AttReqType type);
/**
 *	Attribute axis3PresetPositionValue related methods
 *	Description: This is the preset value that is loaded into the position register of axis 3
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_axis3PresetPositionValue(Tango::Attribute &attr);
	virtual void write_axis3PresetPositionValue(Tango::WAttribute &attr);
	virtual bool is_axis3PresetPositionValue_allowed(Tango::AttReqType type);
/**
 *	Attribute axis4PresetPositionValue related methods
 *	Description: This is the preset value that is loaded into the position register of axis 4
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_axis4PresetPositionValue(Tango::Attribute &attr);
	virtual void write_axis4PresetPositionValue(Tango::WAttribute &attr);
	virtual bool is_axis4PresetPositionValue_allowed(Tango::AttReqType type);
/**
 *	Attribute axis1BiasMode related methods
 *	Description: This selects the mode of operation for the APD Bias control on axis 1. possible values are: OFF, CONSTANT_VOLTAGE, CONSTANT_GAIN, CONSTANT_OPTICAL_POWER, SIG_RMS_ADJUST_MODE
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_axis1BiasMode(Tango::Attribute &attr);
	virtual void write_axis1BiasMode(Tango::WAttribute &attr);
	virtual bool is_axis1BiasMode_allowed(Tango::AttReqType type);
/**
 *	Attribute axis2BiasMode related methods
 *	Description: This selects the mode of operation for the APD Bias control on axis 2. possible values are: OFF, CONSTANT_VOLTAGE, CONSTANT_GAIN, CONSTANT_OPTICAL_POWER, SIG_RMS_ADJUST_MODE
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_axis2BiasMode(Tango::Attribute &attr);
	virtual void write_axis2BiasMode(Tango::WAttribute &attr);
	virtual bool is_axis2BiasMode_allowed(Tango::AttReqType type);
/**
 *	Attribute axis3BiasMode related methods
 *	Description: This selects the mode of operation for the APD Bias control on axis 3 possible values are: OFF, CONSTANT_VOLTAGE, CONSTANT_GAIN, CONSTANT_OPTICAL_POWER, SIG_RMS_ADJUST_MODE
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_axis3BiasMode(Tango::Attribute &attr);
	virtual void write_axis3BiasMode(Tango::WAttribute &attr);
	virtual bool is_axis3BiasMode_allowed(Tango::AttReqType type);
/**
 *	Attribute axis4BiasMode related methods
 *	Description: This selects the mode of operation for the APD Bias control on axis 4 possible values are: OFF, CONSTANT_VOLTAGE, CONSTANT_GAIN, CONSTANT_OPTICAL_POWER, SIG_RMS_ADJUST_MODE
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_axis4BiasMode(Tango::Attribute &attr);
	virtual void write_axis4BiasMode(Tango::WAttribute &attr);
	virtual bool is_axis4BiasMode_allowed(Tango::AttReqType type);
/**
 *	Attribute interferometerConfiguration related methods
 *	Description: The configuration of the interferometer. Accepted values are SINGLE or  DOUBLE
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_interferometerConfiguration(Tango::Attribute &attr);
	virtual void write_interferometerConfiguration(Tango::WAttribute &attr);
	virtual bool is_interferometerConfiguration_allowed(Tango::AttReqType type);
/**
 *	Attribute sisFirmwareVersion related methods
 *	Description: the firmware version of the VME/PCI gateway
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_sisFirmwareVersion(Tango::Attribute &attr);
	virtual bool is_sisFirmwareVersion_allowed(Tango::AttReqType type);
/**
 *	Attribute sisBoardVersion related methods
 *	Description: the board version of the VME/PCI gateway
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_sisBoardVersion(Tango::Attribute &attr);
	virtual bool is_sisBoardVersion_allowed(Tango::AttReqType type);
/**
 *	Attribute zygoFirmwareVersion related methods
 *	Description: the firmware version of the measurement board
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_zygoFirmwareVersion(Tango::Attribute &attr);
	virtual bool is_zygoFirmwareVersion_allowed(Tango::AttReqType type);
/**
 *	Attribute zygoBoardVersion related methods
 *	Description: the version of the measurement board
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_zygoBoardVersion(Tango::Attribute &attr);
	virtual bool is_zygoBoardVersion_allowed(Tango::AttReqType type);
/**
 *	Attribute zygoSerialNumber related methods
 *	Description: the serial number of the measurement board
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_zygoSerialNumber(Tango::Attribute &attr);
	virtual bool is_zygoSerialNumber_allowed(Tango::AttReqType type);
/**
 *	Attribute continuousSamplingAxes related methods
 *	Description: The axes on which to start/stop the continuous scan. enter axes number separated by coma and once finished insert a semi-colon at the end. e.g : 1,2,3;
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_continuousSamplingAxes(Tango::Attribute &attr);
	virtual void write_continuousSamplingAxes(Tango::WAttribute &attr);
	virtual bool is_continuousSamplingAxes_allowed(Tango::AttReqType type);
/**
 *	Attribute continuousSamplingSize related methods
 *	Description: this property is used during continuous acquisition to determine the number of sampling points to acquire from the board
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_continuousSamplingSize(Tango::Attribute &attr);
	virtual void write_continuousSamplingSize(Tango::WAttribute &attr);
	virtual bool is_continuousSamplingSize_allowed(Tango::AttReqType type);
/**
 *	Attribute cecAxes related methods
 *	Description: The axes on which to activate/deactivate cyclic error compensation. enter axes number separated by coma and once finished insert a semi-colon at the end. e.g : 1,2,3;
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_cecAxes(Tango::Attribute &attr);
	virtual void write_cecAxes(Tango::WAttribute &attr);
	virtual bool is_cecAxes_allowed(Tango::AttReqType type);
/**
 *	Attribute continuousScanPositionMeanValue related methods
 *	Description: the position`s mean value of the continuous scan
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_continuousScanPositionMeanValue(Tango::Attribute &attr);
	virtual bool is_continuousScanPositionMeanValue_allowed(Tango::AttReqType type);
/**
 *	Attribute continuousScanPositionStdDev related methods
 *	Description: the position`s standard deviation value of the continuous scan
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_continuousScanPositionStdDev(Tango::Attribute &attr);
	virtual bool is_continuousScanPositionStdDev_allowed(Tango::AttReqType type);
/**
 *	Attribute fifoMode related methods
 *	Description: choose the mode(auto/manual) in Fifo continuous acquisition. In manual mode, the number of samples to record is not taken into account by the device and the user has to execute stopContinuousAcquisition in order to halt the acquisition. In Auto mode, the device takes into account the number of samples and will stop recording once this number has been reached.
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_fifoMode(Tango::Attribute &attr);
	virtual void write_fifoMode(Tango::WAttribute &attr);
	virtual bool is_fifoMode_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : ZygoZMI4104C::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command State related method
	 *	Description: This command gets the device state (stored in its device_state data member) and returns it to the caller.
	 *
	 *	@returns Device state
	 */
	virtual Tango::DevState dev_state();
	/**
	 *	Command Status related method
	 *	Description: This command gets the device status (stored in its device_status data member) and returns it to the caller.
	 *
	 *	@returns Device status
	 */
	virtual Tango::ConstDevString dev_status();
	/**
	 *	Command ResetMeasurementAxis related method
	 *	Description: reset the input measurement axis
	 *
	 *	@param argin axis number to reset
	 */
	virtual void reset_measurement_axis(Tango::DevUShort argin);
	virtual bool is_ResetMeasurementAxis_allowed(const CORBA::Any &any);
	/**
	 *	Command StartContinuousAcquisition related method
	 *	Description: Start the continuous acquisition based on sampling frequency and continuousScanSize board properties. 
	 *               In the Auto mode, the user should provide sampling frequency as well as the number of sample to acquire (samplingFrequency and samplingSize). The acquisition time will be determined by the board.
	 *               In the manual mode, the user only provide the frequency. the size and the integration time will depend on the time at which the user press the  StopAcquisition button.
	 *
	 *	@param argin The input is the continuous acquisitio mode: false for Automatic and true for Manual
	 *	@returns the return code
	 */
	virtual Tango::DevShort start_continuous_acquisition(Tango::DevBoolean argin);
	virtual bool is_StartContinuousAcquisition_allowed(const CORBA::Any &any);
	/**
	 *	Command StopContinnuousAcquisition related method
	 *	Description: stop the current continuous acquisition in manual mode
	 *
	 *	@returns the return code
	 */
	virtual Tango::DevShort stop_continnuous_acquisition();
	virtual bool is_StopContinnuousAcquisition_allowed(const CORBA::Any &any);
	/**
	 *	Command EnableCyclicErrorCompensation related method
	 *	Description: This command calculates and subtracts the cyclic errors 0 and N. The calculation is performed while motion occurs, and the
	 *               coefficients are stored and used to correct for the cyclic errors when motion is at a velocity below
	 *               a predefined threshold.
	 *
	 *	@param argin the axis number on which to enable compensation
	 *	@returns the return code
	 */
	virtual Tango::DevShort enable_cyclic_error_compensation(Tango::DevShort argin);
	virtual bool is_EnableCyclicErrorCompensation_allowed(const CORBA::Any &any);
	/**
	 *	Command DisableCyclicErrorCompensation related method
	 *	Description: This command disable cyclic error compensation on the specified axis
	 *
	 *	@param argin the axis number on which to disable compensation
	 *	@returns the return code
	 */
	virtual Tango::DevShort disable_cyclic_error_compensation(Tango::DevShort argin);
	virtual bool is_DisableCyclicErrorCompensation_allowed(const CORBA::Any &any);
	/**
	 *	Command ResetMeasurementSystem related method
	 *	Description: This command reset all the measurement system including VME/PCIe gateway
	 *
	 */
	virtual void reset_measurement_system();
	virtual bool is_ResetMeasurementSystem_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : ZygoZMI4104C::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(ZygoZMI4104C::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

	void vme_system_reset(bool argin);
	int getLEDsColor(unsigned char* ledsColor);
	void localSetBiasMode(Tango::DevUChar axis, Tango::DevString w_val);
	int getAxesfromInputString(Tango::DevString	val, uint32_t* axisCtr, uint8_t *axisTab, std::string& attr_read);
	std::string ZygoZMI4104C::get_status_msg();
	void append_status_msg(const std::string& message);
	int sca_thread_function(Tango::DevBoolean argin);
	std::string get_ZYGO_error_string(int err_code);
	int enable_cec_hardware(Tango::DevShort argin);
	void write_init_done(bool argin);
	bool read_init_done(void);
/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::Additional Method prototypes
};

/*----- PROTECTED REGION ID(ZygoZMI4104C::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104C::Additional Classes Definitions

}	//	End of namespace

#endif   //	ZygoZMI4104C_H
