/*----- PROTECTED REGION ID(ZygoZMI4104CClass.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        ZygoZMI4104CClass.cpp
//
// description : C++ source for the ZygoZMI4104CClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the ZygoZMI4104C once per process.
//
// project :     ZygoZMI4104C
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <ZygoZMI4104CClass.h>

/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104CClass.cpp

//-------------------------------------------------------------------
/**
 *	Create ZygoZMI4104CClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_ZygoZMI4104C_class(const char *name) {
		return ZygoZMI4104C_ns::ZygoZMI4104CClass::init(name);
	}
}

namespace ZygoZMI4104C_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
ZygoZMI4104CClass *ZygoZMI4104CClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		ZygoZMI4104CClass::ZygoZMI4104CClass(string &s)
 * description : 	constructor for the ZygoZMI4104CClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
ZygoZMI4104CClass::ZygoZMI4104CClass(string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering ZygoZMI4104CClass constructor" << endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(ZygoZMI4104CClass::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104CClass::constructor

	cout2 << "Leaving ZygoZMI4104CClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		ZygoZMI4104CClass::~ZygoZMI4104CClass()
 * description : 	destructor for the ZygoZMI4104CClass
 */
//--------------------------------------------------------
ZygoZMI4104CClass::~ZygoZMI4104CClass()
{
	/*----- PROTECTED REGION ID(ZygoZMI4104CClass::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104CClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		ZygoZMI4104CClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
ZygoZMI4104CClass *ZygoZMI4104CClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new ZygoZMI4104CClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		ZygoZMI4104CClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
ZygoZMI4104CClass *ZygoZMI4104CClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		ResetMeasurementAxisClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetMeasurementAxisClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ResetMeasurementAxisClass::execute(): arrived" << endl;
	Tango::DevUShort argin;
	extract(in_any, argin);
	((static_cast<ZygoZMI4104C *>(device))->reset_measurement_axis(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		StartContinuousAcquisitionClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StartContinuousAcquisitionClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "StartContinuousAcquisitionClass::execute(): arrived" << endl;
	Tango::DevBoolean argin;
	extract(in_any, argin);
	return insert((static_cast<ZygoZMI4104C *>(device))->start_continuous_acquisition(argin));
}

//--------------------------------------------------------
/**
 * method : 		StopContinnuousAcquisitionClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StopContinnuousAcquisitionClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "StopContinnuousAcquisitionClass::execute(): arrived" << endl;
	return insert((static_cast<ZygoZMI4104C *>(device))->stop_continnuous_acquisition());
}

//--------------------------------------------------------
/**
 * method : 		EnableCyclicErrorCompensationClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *EnableCyclicErrorCompensationClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "EnableCyclicErrorCompensationClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	return insert((static_cast<ZygoZMI4104C *>(device))->enable_cyclic_error_compensation(argin));
}

//--------------------------------------------------------
/**
 * method : 		DisableCyclicErrorCompensationClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DisableCyclicErrorCompensationClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DisableCyclicErrorCompensationClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	return insert((static_cast<ZygoZMI4104C *>(device))->disable_cyclic_error_compensation(argin));
}

//--------------------------------------------------------
/**
 * method : 		ResetMeasurementSystemClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetMeasurementSystemClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ResetMeasurementSystemClass::execute(): arrived" << endl;
	((static_cast<ZygoZMI4104C *>(device))->reset_measurement_system());
	return new CORBA::Any();
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : ZygoZMI4104CClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum ZygoZMI4104CClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : ZygoZMI4104CClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum ZygoZMI4104CClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : ZygoZMI4104CClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum ZygoZMI4104CClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : ZygoZMI4104CClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void ZygoZMI4104CClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
	prop_name = "baseAddress";
	prop_desc = "the address of the measurement axis 3";
	prop_def  = "0x16000";
	vect_data.clear();
	vect_data.push_back("0x16000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : ZygoZMI4104CClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void ZygoZMI4104CClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("ZygoZMI4104C");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("");
	description << str_desc;
	data.push_back(description);

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : ZygoZMI4104CClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void ZygoZMI4104CClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(ZygoZMI4104CClass::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104CClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new ZygoZMI4104C(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		ZygoZMI4104C *dev = static_cast<ZygoZMI4104C *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(ZygoZMI4104CClass::device_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104CClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : ZygoZMI4104CClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void ZygoZMI4104CClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(ZygoZMI4104CClass::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104CClass::attribute_factory_before
	//	Attribute : samplingFrequency
	samplingFrequencyAttrib	*samplingfrequency = new samplingFrequencyAttrib();
	Tango::UserDefaultAttrProp	samplingfrequency_prop;
	//	description	not set for samplingFrequency
	//	label	not set for samplingFrequency
	samplingfrequency_prop.set_unit("Hz");
	samplingfrequency_prop.set_standard_unit("Hz");
	samplingfrequency_prop.set_display_unit("Hz");
	//	format	not set for samplingFrequency
	samplingfrequency_prop.set_max_value("20000000");
	//	min_value	not set for samplingFrequency
	//	max_alarm	not set for samplingFrequency
	//	min_alarm	not set for samplingFrequency
	//	max_warning	not set for samplingFrequency
	//	min_warning	not set for samplingFrequency
	//	delta_t	not set for samplingFrequency
	//	delta_val	not set for samplingFrequency
	
	samplingfrequency->set_default_properties(samplingfrequency_prop);
	//	Not Polled
	samplingfrequency->set_disp_level(Tango::OPERATOR);
	samplingfrequency->set_memorized();
	samplingfrequency->set_memorized_init(true);
	att_list.push_back(samplingfrequency);

	//	Attribute : axis1LedState
	axis1LedStateAttrib	*axis1ledstate = new axis1LedStateAttrib();
	Tango::UserDefaultAttrProp	axis1ledstate_prop;
	axis1ledstate_prop.set_description("the state of the error LED on axis 1");
	//	label	not set for axis1LedState
	//	unit	not set for axis1LedState
	//	standard_unit	not set for axis1LedState
	//	display_unit	not set for axis1LedState
	//	format	not set for axis1LedState
	//	max_value	not set for axis1LedState
	//	min_value	not set for axis1LedState
	//	max_alarm	not set for axis1LedState
	//	min_alarm	not set for axis1LedState
	//	max_warning	not set for axis1LedState
	//	min_warning	not set for axis1LedState
	//	delta_t	not set for axis1LedState
	//	delta_val	not set for axis1LedState
	
	axis1ledstate->set_default_properties(axis1ledstate_prop);
	//	Not Polled
	axis1ledstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis1ledstate);

	//	Attribute : axis2LedState
	axis2LedStateAttrib	*axis2ledstate = new axis2LedStateAttrib();
	Tango::UserDefaultAttrProp	axis2ledstate_prop;
	axis2ledstate_prop.set_description("The state of the error LED on axis 2");
	//	label	not set for axis2LedState
	//	unit	not set for axis2LedState
	//	standard_unit	not set for axis2LedState
	//	display_unit	not set for axis2LedState
	//	format	not set for axis2LedState
	//	max_value	not set for axis2LedState
	//	min_value	not set for axis2LedState
	//	max_alarm	not set for axis2LedState
	//	min_alarm	not set for axis2LedState
	//	max_warning	not set for axis2LedState
	//	min_warning	not set for axis2LedState
	//	delta_t	not set for axis2LedState
	//	delta_val	not set for axis2LedState
	
	axis2ledstate->set_default_properties(axis2ledstate_prop);
	//	Not Polled
	axis2ledstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis2ledstate);

	//	Attribute : axis3LedState
	axis3LedStateAttrib	*axis3ledstate = new axis3LedStateAttrib();
	Tango::UserDefaultAttrProp	axis3ledstate_prop;
	axis3ledstate_prop.set_description("The state of the error LED on axis 3");
	//	label	not set for axis3LedState
	//	unit	not set for axis3LedState
	//	standard_unit	not set for axis3LedState
	//	display_unit	not set for axis3LedState
	//	format	not set for axis3LedState
	//	max_value	not set for axis3LedState
	//	min_value	not set for axis3LedState
	//	max_alarm	not set for axis3LedState
	//	min_alarm	not set for axis3LedState
	//	max_warning	not set for axis3LedState
	//	min_warning	not set for axis3LedState
	//	delta_t	not set for axis3LedState
	//	delta_val	not set for axis3LedState
	
	axis3ledstate->set_default_properties(axis3ledstate_prop);
	//	Not Polled
	axis3ledstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis3ledstate);

	//	Attribute : axis4LedState
	axis4LedStateAttrib	*axis4ledstate = new axis4LedStateAttrib();
	Tango::UserDefaultAttrProp	axis4ledstate_prop;
	axis4ledstate_prop.set_description("The state of the error LED on axis 4");
	//	label	not set for axis4LedState
	//	unit	not set for axis4LedState
	//	standard_unit	not set for axis4LedState
	//	display_unit	not set for axis4LedState
	//	format	not set for axis4LedState
	//	max_value	not set for axis4LedState
	//	min_value	not set for axis4LedState
	//	max_alarm	not set for axis4LedState
	//	min_alarm	not set for axis4LedState
	//	max_warning	not set for axis4LedState
	//	min_warning	not set for axis4LedState
	//	delta_t	not set for axis4LedState
	//	delta_val	not set for axis4LedState
	
	axis4ledstate->set_default_properties(axis4ledstate_prop);
	//	Not Polled
	axis4ledstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis4ledstate);

	//	Attribute : referenceAxisLedState
	referenceAxisLedStateAttrib	*referenceaxisledstate = new referenceAxisLedStateAttrib();
	Tango::UserDefaultAttrProp	referenceaxisledstate_prop;
	referenceaxisledstate_prop.set_description("The state of the error LED on reference axis");
	//	label	not set for referenceAxisLedState
	//	unit	not set for referenceAxisLedState
	//	standard_unit	not set for referenceAxisLedState
	//	display_unit	not set for referenceAxisLedState
	//	format	not set for referenceAxisLedState
	//	max_value	not set for referenceAxisLedState
	//	min_value	not set for referenceAxisLedState
	//	max_alarm	not set for referenceAxisLedState
	//	min_alarm	not set for referenceAxisLedState
	//	max_warning	not set for referenceAxisLedState
	//	min_warning	not set for referenceAxisLedState
	//	delta_t	not set for referenceAxisLedState
	//	delta_val	not set for referenceAxisLedState
	
	referenceaxisledstate->set_default_properties(referenceaxisledstate_prop);
	//	Not Polled
	referenceaxisledstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(referenceaxisledstate);

	//	Attribute : currentPrecision
	currentPrecisionAttrib	*currentprecision = new currentPrecisionAttrib();
	Tango::UserDefaultAttrProp	currentprecision_prop;
	currentprecision_prop.set_description("THE PRECISION OF POSITION VALUE REGISTER");
	//	label	not set for currentPrecision
	currentprecision_prop.set_unit("bits");
	//	standard_unit	not set for currentPrecision
	//	display_unit	not set for currentPrecision
	//	format	not set for currentPrecision
	//	max_value	not set for currentPrecision
	//	min_value	not set for currentPrecision
	//	max_alarm	not set for currentPrecision
	//	min_alarm	not set for currentPrecision
	//	max_warning	not set for currentPrecision
	//	min_warning	not set for currentPrecision
	//	delta_t	not set for currentPrecision
	//	delta_val	not set for currentPrecision
	
	{
		vector<string> labels;
		labels.push_back("Reg32");
		labels.push_back("Reg37");
		currentprecision_prop.set_enum_labels(labels);
	}
	currentprecision->set_default_properties(currentprecision_prop);
	//	Not Polled
	currentprecision->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(currentprecision);

	//	Attribute : axis1PositionValue
	axis1PositionValueAttrib	*axis1positionvalue = new axis1PositionValueAttrib();
	Tango::UserDefaultAttrProp	axis1positionvalue_prop;
	axis1positionvalue_prop.set_description("the position value measured on axis 1");
	//	label	not set for axis1PositionValue
	axis1positionvalue_prop.set_unit("mm");
	//	standard_unit	not set for axis1PositionValue
	//	display_unit	not set for axis1PositionValue
	axis1positionvalue_prop.set_format("%6.12f");
	//	max_value	not set for axis1PositionValue
	//	min_value	not set for axis1PositionValue
	//	max_alarm	not set for axis1PositionValue
	//	min_alarm	not set for axis1PositionValue
	//	max_warning	not set for axis1PositionValue
	//	min_warning	not set for axis1PositionValue
	//	delta_t	not set for axis1PositionValue
	//	delta_val	not set for axis1PositionValue
	
	axis1positionvalue->set_default_properties(axis1positionvalue_prop);
	//	Not Polled
	axis1positionvalue->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis1positionvalue);

	//	Attribute : axis2PositionValue
	axis2PositionValueAttrib	*axis2positionvalue = new axis2PositionValueAttrib();
	Tango::UserDefaultAttrProp	axis2positionvalue_prop;
	axis2positionvalue_prop.set_description("the position value measured on axis 2");
	//	label	not set for axis2PositionValue
	axis2positionvalue_prop.set_unit("mm");
	//	standard_unit	not set for axis2PositionValue
	//	display_unit	not set for axis2PositionValue
	axis2positionvalue_prop.set_format("%6.12f");
	//	max_value	not set for axis2PositionValue
	//	min_value	not set for axis2PositionValue
	//	max_alarm	not set for axis2PositionValue
	//	min_alarm	not set for axis2PositionValue
	//	max_warning	not set for axis2PositionValue
	//	min_warning	not set for axis2PositionValue
	//	delta_t	not set for axis2PositionValue
	//	delta_val	not set for axis2PositionValue
	
	axis2positionvalue->set_default_properties(axis2positionvalue_prop);
	//	Not Polled
	axis2positionvalue->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis2positionvalue);

	//	Attribute : axis3PositionValue
	axis3PositionValueAttrib	*axis3positionvalue = new axis3PositionValueAttrib();
	Tango::UserDefaultAttrProp	axis3positionvalue_prop;
	axis3positionvalue_prop.set_description("the position value measured on axis 3");
	//	label	not set for axis3PositionValue
	axis3positionvalue_prop.set_unit("mm");
	//	standard_unit	not set for axis3PositionValue
	//	display_unit	not set for axis3PositionValue
	axis3positionvalue_prop.set_format("%6.12f");
	//	max_value	not set for axis3PositionValue
	//	min_value	not set for axis3PositionValue
	//	max_alarm	not set for axis3PositionValue
	//	min_alarm	not set for axis3PositionValue
	//	max_warning	not set for axis3PositionValue
	//	min_warning	not set for axis3PositionValue
	//	delta_t	not set for axis3PositionValue
	//	delta_val	not set for axis3PositionValue
	
	axis3positionvalue->set_default_properties(axis3positionvalue_prop);
	//	Not Polled
	axis3positionvalue->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis3positionvalue);

	//	Attribute : axis4PositionValue
	axis4PositionValueAttrib	*axis4positionvalue = new axis4PositionValueAttrib();
	Tango::UserDefaultAttrProp	axis4positionvalue_prop;
	axis4positionvalue_prop.set_description("the position value measured on axis 4");
	//	label	not set for axis4PositionValue
	axis4positionvalue_prop.set_unit("mm");
	//	standard_unit	not set for axis4PositionValue
	//	display_unit	not set for axis4PositionValue
	axis4positionvalue_prop.set_format("%6.12f");
	//	max_value	not set for axis4PositionValue
	//	min_value	not set for axis4PositionValue
	//	max_alarm	not set for axis4PositionValue
	//	min_alarm	not set for axis4PositionValue
	//	max_warning	not set for axis4PositionValue
	//	min_warning	not set for axis4PositionValue
	//	delta_t	not set for axis4PositionValue
	//	delta_val	not set for axis4PositionValue
	
	axis4positionvalue->set_default_properties(axis4positionvalue_prop);
	//	Not Polled
	axis4positionvalue->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis4positionvalue);

	//	Attribute : axis1OpticalPowerValue
	axis1OpticalPowerValueAttrib	*axis1opticalpowervalue = new axis1OpticalPowerValueAttrib();
	Tango::UserDefaultAttrProp	axis1opticalpowervalue_prop;
	axis1opticalpowervalue_prop.set_description("the optical power value measured on axis 1");
	//	label	not set for axis1OpticalPowerValue
	axis1opticalpowervalue_prop.set_unit("uW");
	//	standard_unit	not set for axis1OpticalPowerValue
	//	display_unit	not set for axis1OpticalPowerValue
	axis1opticalpowervalue_prop.set_format("%3.12f");
	//	max_value	not set for axis1OpticalPowerValue
	//	min_value	not set for axis1OpticalPowerValue
	//	max_alarm	not set for axis1OpticalPowerValue
	//	min_alarm	not set for axis1OpticalPowerValue
	//	max_warning	not set for axis1OpticalPowerValue
	//	min_warning	not set for axis1OpticalPowerValue
	//	delta_t	not set for axis1OpticalPowerValue
	//	delta_val	not set for axis1OpticalPowerValue
	
	axis1opticalpowervalue->set_default_properties(axis1opticalpowervalue_prop);
	//	Not Polled
	axis1opticalpowervalue->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis1opticalpowervalue);

	//	Attribute : axis2OpticalPowerValue
	axis2OpticalPowerValueAttrib	*axis2opticalpowervalue = new axis2OpticalPowerValueAttrib();
	Tango::UserDefaultAttrProp	axis2opticalpowervalue_prop;
	axis2opticalpowervalue_prop.set_description("the optical power value measured on axis 2");
	//	label	not set for axis2OpticalPowerValue
	axis2opticalpowervalue_prop.set_unit("uW");
	//	standard_unit	not set for axis2OpticalPowerValue
	//	display_unit	not set for axis2OpticalPowerValue
	axis2opticalpowervalue_prop.set_format("%3.12f");
	//	max_value	not set for axis2OpticalPowerValue
	//	min_value	not set for axis2OpticalPowerValue
	//	max_alarm	not set for axis2OpticalPowerValue
	//	min_alarm	not set for axis2OpticalPowerValue
	//	max_warning	not set for axis2OpticalPowerValue
	//	min_warning	not set for axis2OpticalPowerValue
	//	delta_t	not set for axis2OpticalPowerValue
	//	delta_val	not set for axis2OpticalPowerValue
	
	axis2opticalpowervalue->set_default_properties(axis2opticalpowervalue_prop);
	//	Not Polled
	axis2opticalpowervalue->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis2opticalpowervalue);

	//	Attribute : axis3OpticalPowerValue
	axis3OpticalPowerValueAttrib	*axis3opticalpowervalue = new axis3OpticalPowerValueAttrib();
	Tango::UserDefaultAttrProp	axis3opticalpowervalue_prop;
	axis3opticalpowervalue_prop.set_description("the optical power value measured on axis 3");
	//	label	not set for axis3OpticalPowerValue
	axis3opticalpowervalue_prop.set_unit("uW");
	//	standard_unit	not set for axis3OpticalPowerValue
	//	display_unit	not set for axis3OpticalPowerValue
	axis3opticalpowervalue_prop.set_format("%3.12f");
	//	max_value	not set for axis3OpticalPowerValue
	//	min_value	not set for axis3OpticalPowerValue
	//	max_alarm	not set for axis3OpticalPowerValue
	//	min_alarm	not set for axis3OpticalPowerValue
	//	max_warning	not set for axis3OpticalPowerValue
	//	min_warning	not set for axis3OpticalPowerValue
	//	delta_t	not set for axis3OpticalPowerValue
	//	delta_val	not set for axis3OpticalPowerValue
	
	axis3opticalpowervalue->set_default_properties(axis3opticalpowervalue_prop);
	//	Not Polled
	axis3opticalpowervalue->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis3opticalpowervalue);

	//	Attribute : axis4OpticalPowerValue
	axis4OpticalPowerValueAttrib	*axis4opticalpowervalue = new axis4OpticalPowerValueAttrib();
	Tango::UserDefaultAttrProp	axis4opticalpowervalue_prop;
	axis4opticalpowervalue_prop.set_description("the optical power value measured on axis 4");
	//	label	not set for axis4OpticalPowerValue
	axis4opticalpowervalue_prop.set_unit("uW");
	//	standard_unit	not set for axis4OpticalPowerValue
	//	display_unit	not set for axis4OpticalPowerValue
	axis4opticalpowervalue_prop.set_format("%3.12f");
	//	max_value	not set for axis4OpticalPowerValue
	//	min_value	not set for axis4OpticalPowerValue
	//	max_alarm	not set for axis4OpticalPowerValue
	//	min_alarm	not set for axis4OpticalPowerValue
	//	max_warning	not set for axis4OpticalPowerValue
	//	min_warning	not set for axis4OpticalPowerValue
	//	delta_t	not set for axis4OpticalPowerValue
	//	delta_val	not set for axis4OpticalPowerValue
	
	axis4opticalpowervalue->set_default_properties(axis4opticalpowervalue_prop);
	//	Not Polled
	axis4opticalpowervalue->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis4opticalpowervalue);

	//	Attribute : axis1OffsetPositionValue
	axis1OffsetPositionValueAttrib	*axis1offsetpositionvalue = new axis1OffsetPositionValueAttrib();
	Tango::UserDefaultAttrProp	axis1offsetpositionvalue_prop;
	axis1offsetpositionvalue_prop.set_description("This contains the offset value that is subtracted from all position measurements on axis 1");
	//	label	not set for axis1OffsetPositionValue
	axis1offsetpositionvalue_prop.set_unit("mm");
	//	standard_unit	not set for axis1OffsetPositionValue
	//	display_unit	not set for axis1OffsetPositionValue
	//	format	not set for axis1OffsetPositionValue
	//	max_value	not set for axis1OffsetPositionValue
	//	min_value	not set for axis1OffsetPositionValue
	//	max_alarm	not set for axis1OffsetPositionValue
	//	min_alarm	not set for axis1OffsetPositionValue
	//	max_warning	not set for axis1OffsetPositionValue
	//	min_warning	not set for axis1OffsetPositionValue
	//	delta_t	not set for axis1OffsetPositionValue
	//	delta_val	not set for axis1OffsetPositionValue
	
	axis1offsetpositionvalue->set_default_properties(axis1offsetpositionvalue_prop);
	//	Not Polled
	axis1offsetpositionvalue->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis1offsetpositionvalue);

	//	Attribute : axis2OffsetPositionValue
	axis2OffsetPositionValueAttrib	*axis2offsetpositionvalue = new axis2OffsetPositionValueAttrib();
	Tango::UserDefaultAttrProp	axis2offsetpositionvalue_prop;
	axis2offsetpositionvalue_prop.set_description("This contains the offset value that is subtracted from all position measurements on axis 2");
	//	label	not set for axis2OffsetPositionValue
	axis2offsetpositionvalue_prop.set_unit("mm");
	//	standard_unit	not set for axis2OffsetPositionValue
	//	display_unit	not set for axis2OffsetPositionValue
	//	format	not set for axis2OffsetPositionValue
	//	max_value	not set for axis2OffsetPositionValue
	//	min_value	not set for axis2OffsetPositionValue
	//	max_alarm	not set for axis2OffsetPositionValue
	//	min_alarm	not set for axis2OffsetPositionValue
	//	max_warning	not set for axis2OffsetPositionValue
	//	min_warning	not set for axis2OffsetPositionValue
	//	delta_t	not set for axis2OffsetPositionValue
	//	delta_val	not set for axis2OffsetPositionValue
	
	axis2offsetpositionvalue->set_default_properties(axis2offsetpositionvalue_prop);
	//	Not Polled
	axis2offsetpositionvalue->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis2offsetpositionvalue);

	//	Attribute : axis3OffsetPositionValue
	axis3OffsetPositionValueAttrib	*axis3offsetpositionvalue = new axis3OffsetPositionValueAttrib();
	Tango::UserDefaultAttrProp	axis3offsetpositionvalue_prop;
	axis3offsetpositionvalue_prop.set_description("This contains the offset value that is subtracted from all position measurements on axis 3");
	//	label	not set for axis3OffsetPositionValue
	axis3offsetpositionvalue_prop.set_unit("mm");
	//	standard_unit	not set for axis3OffsetPositionValue
	//	display_unit	not set for axis3OffsetPositionValue
	//	format	not set for axis3OffsetPositionValue
	//	max_value	not set for axis3OffsetPositionValue
	//	min_value	not set for axis3OffsetPositionValue
	//	max_alarm	not set for axis3OffsetPositionValue
	//	min_alarm	not set for axis3OffsetPositionValue
	//	max_warning	not set for axis3OffsetPositionValue
	//	min_warning	not set for axis3OffsetPositionValue
	//	delta_t	not set for axis3OffsetPositionValue
	//	delta_val	not set for axis3OffsetPositionValue
	
	axis3offsetpositionvalue->set_default_properties(axis3offsetpositionvalue_prop);
	//	Not Polled
	axis3offsetpositionvalue->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis3offsetpositionvalue);

	//	Attribute : axis4OffsetPositionValue
	axis4OffsetPositionValueAttrib	*axis4offsetpositionvalue = new axis4OffsetPositionValueAttrib();
	Tango::UserDefaultAttrProp	axis4offsetpositionvalue_prop;
	axis4offsetpositionvalue_prop.set_description("This contains the offset value that is subtracted from all position measurements on axis 4");
	//	label	not set for axis4OffsetPositionValue
	axis4offsetpositionvalue_prop.set_unit("mm");
	//	standard_unit	not set for axis4OffsetPositionValue
	//	display_unit	not set for axis4OffsetPositionValue
	//	format	not set for axis4OffsetPositionValue
	//	max_value	not set for axis4OffsetPositionValue
	//	min_value	not set for axis4OffsetPositionValue
	//	max_alarm	not set for axis4OffsetPositionValue
	//	min_alarm	not set for axis4OffsetPositionValue
	//	max_warning	not set for axis4OffsetPositionValue
	//	min_warning	not set for axis4OffsetPositionValue
	//	delta_t	not set for axis4OffsetPositionValue
	//	delta_val	not set for axis4OffsetPositionValue
	
	axis4offsetpositionvalue->set_default_properties(axis4offsetpositionvalue_prop);
	//	Not Polled
	axis4offsetpositionvalue->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis4offsetpositionvalue);

	//	Attribute : axis1PresetPositionValue
	axis1PresetPositionValueAttrib	*axis1presetpositionvalue = new axis1PresetPositionValueAttrib();
	Tango::UserDefaultAttrProp	axis1presetpositionvalue_prop;
	axis1presetpositionvalue_prop.set_description("This is the preset value that is loaded into the position register of axis 1");
	//	label	not set for axis1PresetPositionValue
	axis1presetpositionvalue_prop.set_unit("mm");
	//	standard_unit	not set for axis1PresetPositionValue
	//	display_unit	not set for axis1PresetPositionValue
	//	format	not set for axis1PresetPositionValue
	//	max_value	not set for axis1PresetPositionValue
	//	min_value	not set for axis1PresetPositionValue
	//	max_alarm	not set for axis1PresetPositionValue
	//	min_alarm	not set for axis1PresetPositionValue
	//	max_warning	not set for axis1PresetPositionValue
	//	min_warning	not set for axis1PresetPositionValue
	//	delta_t	not set for axis1PresetPositionValue
	//	delta_val	not set for axis1PresetPositionValue
	
	axis1presetpositionvalue->set_default_properties(axis1presetpositionvalue_prop);
	//	Not Polled
	axis1presetpositionvalue->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis1presetpositionvalue);

	//	Attribute : axis2PresetPositionValue
	axis2PresetPositionValueAttrib	*axis2presetpositionvalue = new axis2PresetPositionValueAttrib();
	Tango::UserDefaultAttrProp	axis2presetpositionvalue_prop;
	axis2presetpositionvalue_prop.set_description("This is the preset value that is loaded into the position register of axis 2");
	//	label	not set for axis2PresetPositionValue
	axis2presetpositionvalue_prop.set_unit("mm");
	//	standard_unit	not set for axis2PresetPositionValue
	//	display_unit	not set for axis2PresetPositionValue
	//	format	not set for axis2PresetPositionValue
	//	max_value	not set for axis2PresetPositionValue
	//	min_value	not set for axis2PresetPositionValue
	//	max_alarm	not set for axis2PresetPositionValue
	//	min_alarm	not set for axis2PresetPositionValue
	//	max_warning	not set for axis2PresetPositionValue
	//	min_warning	not set for axis2PresetPositionValue
	//	delta_t	not set for axis2PresetPositionValue
	//	delta_val	not set for axis2PresetPositionValue
	
	axis2presetpositionvalue->set_default_properties(axis2presetpositionvalue_prop);
	//	Not Polled
	axis2presetpositionvalue->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis2presetpositionvalue);

	//	Attribute : axis3PresetPositionValue
	axis3PresetPositionValueAttrib	*axis3presetpositionvalue = new axis3PresetPositionValueAttrib();
	Tango::UserDefaultAttrProp	axis3presetpositionvalue_prop;
	axis3presetpositionvalue_prop.set_description("This is the preset value that is loaded into the position register of axis 3");
	//	label	not set for axis3PresetPositionValue
	axis3presetpositionvalue_prop.set_unit("mm");
	//	standard_unit	not set for axis3PresetPositionValue
	//	display_unit	not set for axis3PresetPositionValue
	//	format	not set for axis3PresetPositionValue
	//	max_value	not set for axis3PresetPositionValue
	//	min_value	not set for axis3PresetPositionValue
	//	max_alarm	not set for axis3PresetPositionValue
	//	min_alarm	not set for axis3PresetPositionValue
	//	max_warning	not set for axis3PresetPositionValue
	//	min_warning	not set for axis3PresetPositionValue
	//	delta_t	not set for axis3PresetPositionValue
	//	delta_val	not set for axis3PresetPositionValue
	
	axis3presetpositionvalue->set_default_properties(axis3presetpositionvalue_prop);
	//	Not Polled
	axis3presetpositionvalue->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis3presetpositionvalue);

	//	Attribute : axis4PresetPositionValue
	axis4PresetPositionValueAttrib	*axis4presetpositionvalue = new axis4PresetPositionValueAttrib();
	Tango::UserDefaultAttrProp	axis4presetpositionvalue_prop;
	axis4presetpositionvalue_prop.set_description("This is the preset value that is loaded into the position register of axis 4");
	//	label	not set for axis4PresetPositionValue
	axis4presetpositionvalue_prop.set_unit("mm");
	//	standard_unit	not set for axis4PresetPositionValue
	//	display_unit	not set for axis4PresetPositionValue
	//	format	not set for axis4PresetPositionValue
	//	max_value	not set for axis4PresetPositionValue
	//	min_value	not set for axis4PresetPositionValue
	//	max_alarm	not set for axis4PresetPositionValue
	//	min_alarm	not set for axis4PresetPositionValue
	//	max_warning	not set for axis4PresetPositionValue
	//	min_warning	not set for axis4PresetPositionValue
	//	delta_t	not set for axis4PresetPositionValue
	//	delta_val	not set for axis4PresetPositionValue
	
	axis4presetpositionvalue->set_default_properties(axis4presetpositionvalue_prop);
	//	Not Polled
	axis4presetpositionvalue->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis4presetpositionvalue);

	//	Attribute : axis1BiasMode
	axis1BiasModeAttrib	*axis1biasmode = new axis1BiasModeAttrib();
	Tango::UserDefaultAttrProp	axis1biasmode_prop;
	axis1biasmode_prop.set_description("This selects the mode of operation for the APD Bias control on axis 1. possible values are: OFF, CONSTANT_VOLTAGE, CONSTANT_GAIN, CONSTANT_OPTICAL_POWER, SIG_RMS_ADJUST_MODE");
	//	label	not set for axis1BiasMode
	//	unit	not set for axis1BiasMode
	//	standard_unit	not set for axis1BiasMode
	//	display_unit	not set for axis1BiasMode
	//	format	not set for axis1BiasMode
	//	max_value	not set for axis1BiasMode
	//	min_value	not set for axis1BiasMode
	//	max_alarm	not set for axis1BiasMode
	//	min_alarm	not set for axis1BiasMode
	//	max_warning	not set for axis1BiasMode
	//	min_warning	not set for axis1BiasMode
	//	delta_t	not set for axis1BiasMode
	//	delta_val	not set for axis1BiasMode
	
	axis1biasmode->set_default_properties(axis1biasmode_prop);
	//	Not Polled
	axis1biasmode->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis1biasmode);

	//	Attribute : axis2BiasMode
	axis2BiasModeAttrib	*axis2biasmode = new axis2BiasModeAttrib();
	Tango::UserDefaultAttrProp	axis2biasmode_prop;
	axis2biasmode_prop.set_description("This selects the mode of operation for the APD Bias control on axis 2. possible values are: OFF, CONSTANT_VOLTAGE, CONSTANT_GAIN, CONSTANT_OPTICAL_POWER, SIG_RMS_ADJUST_MODE");
	//	label	not set for axis2BiasMode
	//	unit	not set for axis2BiasMode
	//	standard_unit	not set for axis2BiasMode
	//	display_unit	not set for axis2BiasMode
	//	format	not set for axis2BiasMode
	//	max_value	not set for axis2BiasMode
	//	min_value	not set for axis2BiasMode
	//	max_alarm	not set for axis2BiasMode
	//	min_alarm	not set for axis2BiasMode
	//	max_warning	not set for axis2BiasMode
	//	min_warning	not set for axis2BiasMode
	//	delta_t	not set for axis2BiasMode
	//	delta_val	not set for axis2BiasMode
	
	axis2biasmode->set_default_properties(axis2biasmode_prop);
	//	Not Polled
	axis2biasmode->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis2biasmode);

	//	Attribute : axis3BiasMode
	axis3BiasModeAttrib	*axis3biasmode = new axis3BiasModeAttrib();
	Tango::UserDefaultAttrProp	axis3biasmode_prop;
	axis3biasmode_prop.set_description("This selects the mode of operation for the APD Bias control on axis 3 possible values are: OFF, CONSTANT_VOLTAGE, CONSTANT_GAIN, CONSTANT_OPTICAL_POWER, SIG_RMS_ADJUST_MODE");
	//	label	not set for axis3BiasMode
	//	unit	not set for axis3BiasMode
	//	standard_unit	not set for axis3BiasMode
	//	display_unit	not set for axis3BiasMode
	//	format	not set for axis3BiasMode
	//	max_value	not set for axis3BiasMode
	//	min_value	not set for axis3BiasMode
	//	max_alarm	not set for axis3BiasMode
	//	min_alarm	not set for axis3BiasMode
	//	max_warning	not set for axis3BiasMode
	//	min_warning	not set for axis3BiasMode
	//	delta_t	not set for axis3BiasMode
	//	delta_val	not set for axis3BiasMode
	
	axis3biasmode->set_default_properties(axis3biasmode_prop);
	//	Not Polled
	axis3biasmode->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis3biasmode);

	//	Attribute : axis4BiasMode
	axis4BiasModeAttrib	*axis4biasmode = new axis4BiasModeAttrib();
	Tango::UserDefaultAttrProp	axis4biasmode_prop;
	axis4biasmode_prop.set_description("This selects the mode of operation for the APD Bias control on axis 4 possible values are: OFF, CONSTANT_VOLTAGE, CONSTANT_GAIN, CONSTANT_OPTICAL_POWER, SIG_RMS_ADJUST_MODE");
	//	label	not set for axis4BiasMode
	//	unit	not set for axis4BiasMode
	//	standard_unit	not set for axis4BiasMode
	//	display_unit	not set for axis4BiasMode
	//	format	not set for axis4BiasMode
	//	max_value	not set for axis4BiasMode
	//	min_value	not set for axis4BiasMode
	//	max_alarm	not set for axis4BiasMode
	//	min_alarm	not set for axis4BiasMode
	//	max_warning	not set for axis4BiasMode
	//	min_warning	not set for axis4BiasMode
	//	delta_t	not set for axis4BiasMode
	//	delta_val	not set for axis4BiasMode
	
	axis4biasmode->set_default_properties(axis4biasmode_prop);
	//	Not Polled
	axis4biasmode->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(axis4biasmode);

	//	Attribute : interferometerConfiguration
	interferometerConfigurationAttrib	*interferometerconfiguration = new interferometerConfigurationAttrib();
	Tango::UserDefaultAttrProp	interferometerconfiguration_prop;
	interferometerconfiguration_prop.set_description("The configuration of the interferometer. Accepted values are SINGLE or  DOUBLE");
	//	label	not set for interferometerConfiguration
	//	unit	not set for interferometerConfiguration
	//	standard_unit	not set for interferometerConfiguration
	//	display_unit	not set for interferometerConfiguration
	//	format	not set for interferometerConfiguration
	//	max_value	not set for interferometerConfiguration
	//	min_value	not set for interferometerConfiguration
	//	max_alarm	not set for interferometerConfiguration
	//	min_alarm	not set for interferometerConfiguration
	//	max_warning	not set for interferometerConfiguration
	//	min_warning	not set for interferometerConfiguration
	//	delta_t	not set for interferometerConfiguration
	//	delta_val	not set for interferometerConfiguration
	
	interferometerconfiguration->set_default_properties(interferometerconfiguration_prop);
	//	Not Polled
	interferometerconfiguration->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(interferometerconfiguration);

	//	Attribute : sisFirmwareVersion
	sisFirmwareVersionAttrib	*sisfirmwareversion = new sisFirmwareVersionAttrib();
	Tango::UserDefaultAttrProp	sisfirmwareversion_prop;
	sisfirmwareversion_prop.set_description("the firmware version of the VME/PCI gateway");
	//	label	not set for sisFirmwareVersion
	//	unit	not set for sisFirmwareVersion
	//	standard_unit	not set for sisFirmwareVersion
	//	display_unit	not set for sisFirmwareVersion
	//	format	not set for sisFirmwareVersion
	//	max_value	not set for sisFirmwareVersion
	//	min_value	not set for sisFirmwareVersion
	//	max_alarm	not set for sisFirmwareVersion
	//	min_alarm	not set for sisFirmwareVersion
	//	max_warning	not set for sisFirmwareVersion
	//	min_warning	not set for sisFirmwareVersion
	//	delta_t	not set for sisFirmwareVersion
	//	delta_val	not set for sisFirmwareVersion
	
	sisfirmwareversion->set_default_properties(sisfirmwareversion_prop);
	//	Not Polled
	sisfirmwareversion->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(sisfirmwareversion);

	//	Attribute : sisBoardVersion
	sisBoardVersionAttrib	*sisboardversion = new sisBoardVersionAttrib();
	Tango::UserDefaultAttrProp	sisboardversion_prop;
	sisboardversion_prop.set_description("the board version of the VME/PCI gateway");
	//	label	not set for sisBoardVersion
	//	unit	not set for sisBoardVersion
	//	standard_unit	not set for sisBoardVersion
	//	display_unit	not set for sisBoardVersion
	//	format	not set for sisBoardVersion
	//	max_value	not set for sisBoardVersion
	//	min_value	not set for sisBoardVersion
	//	max_alarm	not set for sisBoardVersion
	//	min_alarm	not set for sisBoardVersion
	//	max_warning	not set for sisBoardVersion
	//	min_warning	not set for sisBoardVersion
	//	delta_t	not set for sisBoardVersion
	//	delta_val	not set for sisBoardVersion
	
	sisboardversion->set_default_properties(sisboardversion_prop);
	//	Not Polled
	sisboardversion->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(sisboardversion);

	//	Attribute : zygoFirmwareVersion
	zygoFirmwareVersionAttrib	*zygofirmwareversion = new zygoFirmwareVersionAttrib();
	Tango::UserDefaultAttrProp	zygofirmwareversion_prop;
	zygofirmwareversion_prop.set_description("the firmware version of the measurement board");
	//	label	not set for zygoFirmwareVersion
	//	unit	not set for zygoFirmwareVersion
	//	standard_unit	not set for zygoFirmwareVersion
	//	display_unit	not set for zygoFirmwareVersion
	//	format	not set for zygoFirmwareVersion
	//	max_value	not set for zygoFirmwareVersion
	//	min_value	not set for zygoFirmwareVersion
	//	max_alarm	not set for zygoFirmwareVersion
	//	min_alarm	not set for zygoFirmwareVersion
	//	max_warning	not set for zygoFirmwareVersion
	//	min_warning	not set for zygoFirmwareVersion
	//	delta_t	not set for zygoFirmwareVersion
	//	delta_val	not set for zygoFirmwareVersion
	
	zygofirmwareversion->set_default_properties(zygofirmwareversion_prop);
	//	Not Polled
	zygofirmwareversion->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(zygofirmwareversion);

	//	Attribute : zygoBoardVersion
	zygoBoardVersionAttrib	*zygoboardversion = new zygoBoardVersionAttrib();
	Tango::UserDefaultAttrProp	zygoboardversion_prop;
	zygoboardversion_prop.set_description("the version of the measurement board");
	//	label	not set for zygoBoardVersion
	//	unit	not set for zygoBoardVersion
	//	standard_unit	not set for zygoBoardVersion
	//	display_unit	not set for zygoBoardVersion
	//	format	not set for zygoBoardVersion
	//	max_value	not set for zygoBoardVersion
	//	min_value	not set for zygoBoardVersion
	//	max_alarm	not set for zygoBoardVersion
	//	min_alarm	not set for zygoBoardVersion
	//	max_warning	not set for zygoBoardVersion
	//	min_warning	not set for zygoBoardVersion
	//	delta_t	not set for zygoBoardVersion
	//	delta_val	not set for zygoBoardVersion
	
	zygoboardversion->set_default_properties(zygoboardversion_prop);
	//	Not Polled
	zygoboardversion->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(zygoboardversion);

	//	Attribute : zygoSerialNumber
	zygoSerialNumberAttrib	*zygoserialnumber = new zygoSerialNumberAttrib();
	Tango::UserDefaultAttrProp	zygoserialnumber_prop;
	zygoserialnumber_prop.set_description("the serial number of the measurement board");
	//	label	not set for zygoSerialNumber
	//	unit	not set for zygoSerialNumber
	//	standard_unit	not set for zygoSerialNumber
	//	display_unit	not set for zygoSerialNumber
	//	format	not set for zygoSerialNumber
	//	max_value	not set for zygoSerialNumber
	//	min_value	not set for zygoSerialNumber
	//	max_alarm	not set for zygoSerialNumber
	//	min_alarm	not set for zygoSerialNumber
	//	max_warning	not set for zygoSerialNumber
	//	min_warning	not set for zygoSerialNumber
	//	delta_t	not set for zygoSerialNumber
	//	delta_val	not set for zygoSerialNumber
	
	zygoserialnumber->set_default_properties(zygoserialnumber_prop);
	//	Not Polled
	zygoserialnumber->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(zygoserialnumber);

	//	Attribute : continuousSamplingAxes
	continuousSamplingAxesAttrib	*continuoussamplingaxes = new continuousSamplingAxesAttrib();
	Tango::UserDefaultAttrProp	continuoussamplingaxes_prop;
	continuoussamplingaxes_prop.set_description("The axes on which to start/stop the continuous scan. enter axes number separated by coma and once finished insert a semi-colon at the end. e.g : 1,2,3;");
	//	label	not set for continuousSamplingAxes
	//	unit	not set for continuousSamplingAxes
	//	standard_unit	not set for continuousSamplingAxes
	//	display_unit	not set for continuousSamplingAxes
	//	format	not set for continuousSamplingAxes
	//	max_value	not set for continuousSamplingAxes
	//	min_value	not set for continuousSamplingAxes
	//	max_alarm	not set for continuousSamplingAxes
	//	min_alarm	not set for continuousSamplingAxes
	//	max_warning	not set for continuousSamplingAxes
	//	min_warning	not set for continuousSamplingAxes
	//	delta_t	not set for continuousSamplingAxes
	//	delta_val	not set for continuousSamplingAxes
	
	continuoussamplingaxes->set_default_properties(continuoussamplingaxes_prop);
	//	Not Polled
	continuoussamplingaxes->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(continuoussamplingaxes);

	//	Attribute : continuousSamplingSize
	continuousSamplingSizeAttrib	*continuoussamplingsize = new continuousSamplingSizeAttrib();
	Tango::UserDefaultAttrProp	continuoussamplingsize_prop;
	continuoussamplingsize_prop.set_description("this property is used during continuous acquisition to determine the number of sampling points to acquire from the board");
	//	label	not set for continuousSamplingSize
	//	unit	not set for continuousSamplingSize
	//	standard_unit	not set for continuousSamplingSize
	//	display_unit	not set for continuousSamplingSize
	//	format	not set for continuousSamplingSize
	//	max_value	not set for continuousSamplingSize
	//	min_value	not set for continuousSamplingSize
	//	max_alarm	not set for continuousSamplingSize
	//	min_alarm	not set for continuousSamplingSize
	//	max_warning	not set for continuousSamplingSize
	//	min_warning	not set for continuousSamplingSize
	//	delta_t	not set for continuousSamplingSize
	//	delta_val	not set for continuousSamplingSize
	
	continuoussamplingsize->set_default_properties(continuoussamplingsize_prop);
	//	Not Polled
	continuoussamplingsize->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(continuoussamplingsize);

	//	Attribute : cecAxes
	cecAxesAttrib	*cecaxes = new cecAxesAttrib();
	Tango::UserDefaultAttrProp	cecaxes_prop;
	cecaxes_prop.set_description("The axes on which to activate/deactivate cyclic error compensation. enter axes number separated by coma and once finished insert a semi-colon at the end. e.g : 1,2,3;");
	//	label	not set for cecAxes
	//	unit	not set for cecAxes
	//	standard_unit	not set for cecAxes
	//	display_unit	not set for cecAxes
	//	format	not set for cecAxes
	//	max_value	not set for cecAxes
	//	min_value	not set for cecAxes
	//	max_alarm	not set for cecAxes
	//	min_alarm	not set for cecAxes
	//	max_warning	not set for cecAxes
	//	min_warning	not set for cecAxes
	//	delta_t	not set for cecAxes
	//	delta_val	not set for cecAxes
	
	cecaxes->set_default_properties(cecaxes_prop);
	//	Not Polled
	cecaxes->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(cecaxes);

	//	Attribute : continuousScanPositionMeanValue
	continuousScanPositionMeanValueAttrib	*continuousscanpositionmeanvalue = new continuousScanPositionMeanValueAttrib();
	Tango::UserDefaultAttrProp	continuousscanpositionmeanvalue_prop;
	continuousscanpositionmeanvalue_prop.set_description("the position`s mean value of the continuous scan");
	//	label	not set for continuousScanPositionMeanValue
	continuousscanpositionmeanvalue_prop.set_unit("mm");
	//	standard_unit	not set for continuousScanPositionMeanValue
	//	display_unit	not set for continuousScanPositionMeanValue
	//	format	not set for continuousScanPositionMeanValue
	//	max_value	not set for continuousScanPositionMeanValue
	//	min_value	not set for continuousScanPositionMeanValue
	//	max_alarm	not set for continuousScanPositionMeanValue
	//	min_alarm	not set for continuousScanPositionMeanValue
	//	max_warning	not set for continuousScanPositionMeanValue
	//	min_warning	not set for continuousScanPositionMeanValue
	//	delta_t	not set for continuousScanPositionMeanValue
	//	delta_val	not set for continuousScanPositionMeanValue
	
	continuousscanpositionmeanvalue->set_default_properties(continuousscanpositionmeanvalue_prop);
	//	Not Polled
	continuousscanpositionmeanvalue->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(continuousscanpositionmeanvalue);

	//	Attribute : continuousScanPositionStdDev
	continuousScanPositionStdDevAttrib	*continuousscanpositionstddev = new continuousScanPositionStdDevAttrib();
	Tango::UserDefaultAttrProp	continuousscanpositionstddev_prop;
	continuousscanpositionstddev_prop.set_description("the position`s standard deviation value of the continuous scan");
	//	label	not set for continuousScanPositionStdDev
	continuousscanpositionstddev_prop.set_unit("mm");
	//	standard_unit	not set for continuousScanPositionStdDev
	//	display_unit	not set for continuousScanPositionStdDev
	//	format	not set for continuousScanPositionStdDev
	//	max_value	not set for continuousScanPositionStdDev
	//	min_value	not set for continuousScanPositionStdDev
	//	max_alarm	not set for continuousScanPositionStdDev
	//	min_alarm	not set for continuousScanPositionStdDev
	//	max_warning	not set for continuousScanPositionStdDev
	//	min_warning	not set for continuousScanPositionStdDev
	//	delta_t	not set for continuousScanPositionStdDev
	//	delta_val	not set for continuousScanPositionStdDev
	
	continuousscanpositionstddev->set_default_properties(continuousscanpositionstddev_prop);
	//	Not Polled
	continuousscanpositionstddev->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(continuousscanpositionstddev);

	//	Attribute : fifoMode
	fifoModeAttrib	*fifomode = new fifoModeAttrib();
	Tango::UserDefaultAttrProp	fifomode_prop;
	fifomode_prop.set_description("choose the mode(auto/manual) in Fifo continuous acquisition. In manual mode, the number of samples to record is not taken into account by the device and the user has to execute stopContinuousAcquisition in order to halt the acquisition. In Auto mode, the device takes into account the number of samples and will stop recording once this number has been reached.");
	//	label	not set for fifoMode
	//	unit	not set for fifoMode
	//	standard_unit	not set for fifoMode
	//	display_unit	not set for fifoMode
	//	format	not set for fifoMode
	//	max_value	not set for fifoMode
	//	min_value	not set for fifoMode
	//	max_alarm	not set for fifoMode
	//	min_alarm	not set for fifoMode
	//	max_warning	not set for fifoMode
	//	min_warning	not set for fifoMode
	//	delta_t	not set for fifoMode
	//	delta_val	not set for fifoMode
	
	{
		vector<string> labels;
		labels.push_back("AUTO");
		labels.push_back("MANUAL");
		fifomode_prop.set_enum_labels(labels);
	}
	fifomode->set_default_properties(fifomode_prop);
	//	Not Polled
	fifomode->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(fifomode);


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(ZygoZMI4104CClass::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104CClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : ZygoZMI4104CClass::pipe_factory()
 *	Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void ZygoZMI4104CClass::pipe_factory()
{
	/*----- PROTECTED REGION ID(ZygoZMI4104CClass::pipe_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104CClass::pipe_factory_before
	/*----- PROTECTED REGION ID(ZygoZMI4104CClass::pipe_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104CClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : ZygoZMI4104CClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void ZygoZMI4104CClass::command_factory()
{
	/*----- PROTECTED REGION ID(ZygoZMI4104CClass::command_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104CClass::command_factory_before


	//	Command ResetMeasurementAxis
	ResetMeasurementAxisClass	*pResetMeasurementAxisCmd =
		new ResetMeasurementAxisClass("ResetMeasurementAxis",
			Tango::DEV_USHORT, Tango::DEV_VOID,
			"axis number to reset",
			"",
			Tango::OPERATOR);
	command_list.push_back(pResetMeasurementAxisCmd);

	//	Command StartContinuousAcquisition
	StartContinuousAcquisitionClass	*pStartContinuousAcquisitionCmd =
		new StartContinuousAcquisitionClass("StartContinuousAcquisition",
			Tango::DEV_BOOLEAN, Tango::DEV_SHORT,
			"The input is the continuous acquisitio mode: false for Automatic and true for Manual",
			"the return code",
			Tango::OPERATOR);
	command_list.push_back(pStartContinuousAcquisitionCmd);

	//	Command StopContinnuousAcquisition
	StopContinnuousAcquisitionClass	*pStopContinnuousAcquisitionCmd =
		new StopContinnuousAcquisitionClass("StopContinnuousAcquisition",
			Tango::DEV_VOID, Tango::DEV_SHORT,
			"",
			"the return code",
			Tango::OPERATOR);
	command_list.push_back(pStopContinnuousAcquisitionCmd);

	//	Command EnableCyclicErrorCompensation
	EnableCyclicErrorCompensationClass	*pEnableCyclicErrorCompensationCmd =
		new EnableCyclicErrorCompensationClass("EnableCyclicErrorCompensation",
			Tango::DEV_SHORT, Tango::DEV_SHORT,
			"the axis number on which to enable compensation",
			"the return code",
			Tango::OPERATOR);
	command_list.push_back(pEnableCyclicErrorCompensationCmd);

	//	Command DisableCyclicErrorCompensation
	DisableCyclicErrorCompensationClass	*pDisableCyclicErrorCompensationCmd =
		new DisableCyclicErrorCompensationClass("DisableCyclicErrorCompensation",
			Tango::DEV_SHORT, Tango::DEV_SHORT,
			"the axis number on which to disable compensation",
			"the return code",
			Tango::OPERATOR);
	command_list.push_back(pDisableCyclicErrorCompensationCmd);

	//	Command ResetMeasurementSystem
	ResetMeasurementSystemClass	*pResetMeasurementSystemCmd =
		new ResetMeasurementSystemClass("ResetMeasurementSystem",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pResetMeasurementSystemCmd);

	/*----- PROTECTED REGION ID(ZygoZMI4104CClass::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104CClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		ZygoZMI4104CClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void ZygoZMI4104CClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(ZygoZMI4104CClass::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104CClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		ZygoZMI4104CClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void ZygoZMI4104CClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		ZygoZMI4104C *dev = static_cast<ZygoZMI4104C *> (dev_impl);

		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(ZygoZMI4104CClass::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104CClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : ZygoZMI4104CClass::get_attr_object_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *ZygoZMI4104CClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(ZygoZMI4104CClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	ZygoZMI4104CClass::Additional Methods
} //	namespace
